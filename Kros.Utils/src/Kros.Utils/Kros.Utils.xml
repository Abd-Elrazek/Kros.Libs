<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kros.Utils</name>
    </assembly>
    <members>
        <member name="T:Kros.Caching.Cache`2">
            <summary>
            Class for caching data.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:Kros.Caching.ICache`2" />
        </member>
        <member name="M:Kros.Caching.Cache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kros.Caching.Cache`2"/> class.
            </summary>
        </member>
        <member name="M:Kros.Caching.Cache`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kros.Caching.Cache`2"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys.</param>
        </member>
        <member name="M:Kros.Caching.Cache`2.Get(`0,System.Func{`1})">
            <summary>
            Gets the cached value by key.
            </summary>
            <param name="key">The key.</param>
            <param name="factory">The factory for creating value, if doesn't exist in cahce.</param>
            <returns>
            Value from Cache.
            </returns>
            <remarks>
            If value key doesn't exist in cache, then factory is use for creating value and value is set to cache.
            </remarks>
        </member>
        <member name="P:Kros.Caching.Cache`2.Count">
            <summary>
            Gets the count of cached data.
            </summary>
        </member>
        <member name="M:Kros.Caching.Cache`2.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="T:Kros.Caching.ICache`2">
            <summary>
            Interface, which describe class for caching data.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Kros.Caching.ICache`2.Get(`0,System.Func{`1})">
            <summary>
            Gets the cached value by key.
            </summary>
            <param name="key">The key.</param>
            <param name="factory">The factory for creating value, if doesn't exist in cahce.</param>
            <returns>
            Value from Cache.
            </returns>
            <remarks>
            If value key doesn't exist in cache, then factory is use for creating value and value is set to cache.
            </remarks>
        </member>
        <member name="P:Kros.Caching.ICache`2.Count">
            <summary>
            Gets the count of cached data.
            </summary>
        </member>
        <member name="M:Kros.Caching.ICache`2.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="T:Kros.Data.BulkActions.BulkActionDataReader">
            <summary>
            Obálka, ktorá jednoduché rozhranie <see cref="T:Kros.Data.BulkActions.IBulkActionDataReader"/>, zverejní ako komplikovanejší
            <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkActionDataReader.#ctor(Kros.Data.BulkActions.IBulkActionDataReader)">
            <summary>
            Vytvorí <see cref="T:System.Data.IDataReader"/> nad zadaným reader-om <paramref name="reader"/>.
            </summary>
            <param name="reader">Vstupný reader.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> má hodnotu <c>null</c>.</exception>
        </member>
        <member name="P:Kros.Data.BulkActions.BulkActionDataReader.FieldCount">
            <summary>
            Počet stĺpcov v dátovom riadku.
            </summary>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkActionDataReader.GetName(System.Int32)">
            <summary>
            Vráti názov stĺpca.
            </summary>
            <param name="i">Index hľadaného stĺpca.</param>
            <returns>Meno stĺpca.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Zadaný index bol mimo rozsah stĺpcov 0 až <see cref="P:Kros.Data.BulkActions.BulkActionDataReader.FieldCount"/>.
            </exception>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkActionDataReader.GetOrdinal(System.String)">
            <summary>
            Vráti index stĺpca s menom <paramref name="name"/>.
            </summary>
            <param name="name">Meno hľadaného stĺpca.</param>
            <returns>Index hľadaného stĺpca.</returns>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkActionDataReader.GetValue(System.Int32)">
            <summary>
            Vráti hodnotu zadaného stĺpca.
            </summary>
            <param name="i">Index stĺpca, ktorého hodnota sa vracia.</param>
            <returns>Objekt - hodnota daného stĺpca.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Zadaný index bol mimo rozsah stĺpcov 0 až <see cref="P:Kros.Data.BulkActions.BulkActionDataReader.FieldCount"/>.
            </exception>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkActionDataReader.Read">
            <summary>
            Posunie reader na ďalší záznam.
            </summary>
            <returns><see langword="true"/>, ak existuje ďalší záznam a reader bol posunutý, <see langword="false"/> ak už ďalší záznam neexistuje.
            </returns>
        </member>
        <member name="T:Kros.Data.BulkActions.BulkUpdateBase">
            <summary>
            Spoločný predok pre bulk update.
            </summary>
        </member>
        <member name="F:Kros.Data.BulkActions.BulkUpdateBase.PrefixTempTable">
            <summary>
            Prefix pre tempovú tabuľku.
            </summary>
        </member>
        <member name="F:Kros.Data.BulkActions.BulkUpdateBase._connection">
            <summary>
            Connection.
            </summary>
        </member>
        <member name="F:Kros.Data.BulkActions.BulkUpdateBase._disposeOfConnection">
            <summary>
            Či je potrebné disposnúť connection.
            </summary>
        </member>
        <member name="P:Kros.Data.BulkActions.BulkUpdateBase.ExternalTransaction">
            <summary>
            Externá transakcia, v ktorej sa vykoná editácia dát.
            </summary>
        </member>
        <member name="P:Kros.Data.BulkActions.BulkUpdateBase.DestinationTableName">
            <summary>
            Meno cieľovej tabuľky v databáze.
            </summary>
        </member>
        <member name="P:Kros.Data.BulkActions.BulkUpdateBase.TempTableAction">
            <inheritdoc/>
        </member>
        <member name="P:Kros.Data.BulkActions.BulkUpdateBase.PrimaryKeyColumn">
            <summary>
            Primárny kľúč.
            </summary>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkUpdateBase.Update(Kros.Data.BulkActions.IBulkActionDataReader)">
            <summary>
            Zedituje všetky dáta zo zdroja <paramref name="reader"/>.
            </summary>
            <param name="reader">Zdroj dát.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkUpdateBase.Update(System.Data.IDataReader)">
            <summary>
            Zedituje všetky dáta zo zdroja <paramref name="reader"/>.
            </summary>
            <param name="reader">Zdroj dát.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkUpdateBase.Update(System.Data.DataTable)">
            <summary>
            Zedituje všetky riadky z tabuľky <paramref name="table"/>.
            </summary>
            <param name="table">Zdrojové dáta.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkUpdateBase.CreateBulkInsert">
            <summary>
            Vytvorí bulk insert.
            </summary>
            <returns>Bulk insert.</returns>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkUpdateBase.InvokeAction(System.String)">
            <summary>
            Zavolá akciu nad tempovou databázou.
            </summary>
            <param name="tempTableName"></param>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkUpdateBase.GetTempTableName">
            <summary>
            Vráti názov tempovej tabuľky.
            </summary>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkUpdateBase.CreateTempTable(System.Data.IDataReader,System.String)">
            <summary>
            Vytvorí tempovú tabuľku podľa <paramref name="reader"/>.
            </summary>
            <param name="reader">Reader pre sprístupnenie dát.</param>
            <param name="tempTableName">Názov tempovej tabuľky.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkUpdateBase.GetTempTableNameForBulkInsert(System.String)">
            <summary>
            Vráti názov tempovej tabuľky pre bulk insert.
            </summary>
            <param name="name">Názov tempovej tabuľky.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkUpdateBase.CreateCommandForPrimaryKey">
            <summary>
            Vráti command pre vytvorenie primárneho kľúča.
            </summary>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkUpdateBase.UpdateDestinationTable(System.Data.IDataReader,System.String)">
            <summary>
            Vykoná update nad cieľovou tabuľkou.
            </summary>
            <param name="reader">Reader pre sprístupnenie dát.</param>
            <param name="tempTableName">Názov tempovej tabuľky.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkUpdateBase.DoneTempTable(System.String)">
            <summary>
            Ukončí prácu s tempovou tabuľkou.
            </summary>
            <param name="tempTableName">Názov tempovej tabuľky.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkUpdateBase.GetColumnNamesForTempTable(System.Data.IDataReader)">
            <summary>
            Zoznam stĺpcov tempovej tabuľky.
            </summary>
            <param name="reader">Reader pre prístup k dátam.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.BulkUpdateBase.GetUpdateColumnNames(System.Data.IDataReader,System.String)">
            <summary>
            Zoznam stĺpcov tempovej tabuľky.
            </summary>
            <param name="reader">Reader pre prístup k dátam.</param>
            <param name="tempTableName">Názov tempovej tabuľky.</param>
            <returns></returns>
        </member>
        <member name="T:Kros.Data.BulkActions.EnumerableDataReader`1">
            <summary>
            Implementácia rozhrania <see cref="T:Kros.Data.BulkActions.IBulkActionDataReader"/> nad ľubovoľným zoznamom objektov.
            </summary>
            <typeparam name="T">Typ dátového objektu.</typeparam>
            <remarks>
            Trieda implementuje rozhranie <see cref="T:Kros.Data.BulkActions.IBulkActionDataReader"/> nad ľubovoľným zoznamom objektov,
            aby bolo jednoduché takýto zoznam hromadne vložiť do databázy pomocou <c>BulkInsert</c>-u.
            </remarks>
        </member>
        <member name="M:Kros.Data.BulkActions.EnumerableDataReader`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Vytvorí inštanciu reader-a nad dátami <paramref name="data"/> so zoznamom sĺpcov <paramref name="columnNames"/>.
            </summary>
            <param name="data">Dáta, nad ktorými je vytvorený reader.</param>
            <param name="columnNames">Zoznam stĺpcov s ktorými reader pracuje. Pre všetky stĺpce v zozname musí
            existovať property s rovnakým menom v objekte <c>T</c>.</param>
            <exception cref="T:System.ArgumentNullException">
            Hodnota <paramref name="data"/>, alebo <paramref name="columnNames"/> je <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Zoznam <paramref name="columnNames"/> je prázdny, tzn. neobsahuje ani jednu hodnotu.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Trieda <c>T</c> nemá všetky vlastnosti určené zoznamom sĺpcov <paramref name="columnNames"/>.
            </exception>
        </member>
        <member name="P:Kros.Data.BulkActions.EnumerableDataReader`1.FieldCount">
            <summary>
            Počet stĺpcov.
            </summary>
        </member>
        <member name="M:Kros.Data.BulkActions.EnumerableDataReader`1.GetName(System.Int32)">
            <summary>
            Meno stĺpca na indexe <paramref name="i"/>.
            </summary>
            <param name="i">Index stĺpca.</param>
            <returns>Reťazec.</returns>
        </member>
        <member name="M:Kros.Data.BulkActions.EnumerableDataReader`1.GetOrdinal(System.String)">
            <summary>
            Index stĺpca určeného menom <paramref name="name"/>.
            </summary>
            <param name="name">Meno stĺpca.</param>
            <returns>Číslo.</returns>
        </member>
        <member name="M:Kros.Data.BulkActions.EnumerableDataReader`1.GetValue(System.Int32)">
            <summary>
            Vráti hodnotu stĺpca na indexe <paramref name="i"/>.
            </summary>
            <param name="i">Index stĺpca.</param>
            <returns>Hodnota stĺpca.</returns>
        </member>
        <member name="M:Kros.Data.BulkActions.EnumerableDataReader`1.Read">
            <summary>
            Posunie sa na ďalšiu položku v zozname.
            </summary>
            <returns>Vráti <see langword="true"/>, ak sa podarilo posunúť na ďalšiu položku, <see langword="false"/>,
            ak už žiadna položka nie je.</returns>
        </member>
        <member name="T:Kros.Data.BulkActions.IBulkActionDataReader">
            <summary>
            Rozhranie pre zdroj dát pre <see cref="T:Kros.Data.BulkActions.IBulkInsert"/>.
            </summary>
        </member>
        <member name="P:Kros.Data.BulkActions.IBulkActionDataReader.FieldCount">
            <summary>
            Počet stĺpcov v dátovom riadku.
            </summary>
        </member>
        <member name="M:Kros.Data.BulkActions.IBulkActionDataReader.GetName(System.Int32)">
            <summary>
            Vráti názov stĺpca.
            </summary>
            <param name="i">Index hľadaného stĺpca.</param>
            <returns>Meno stĺpca.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Zadaný index bol mimo rozsah stĺpcov 0 až <see cref="P:Kros.Data.BulkActions.IBulkActionDataReader.FieldCount"/>.
            </exception>
        </member>
        <member name="M:Kros.Data.BulkActions.IBulkActionDataReader.GetOrdinal(System.String)">
            <summary>
            Vráti index stĺpca s menom <paramref name="name"/>.
            </summary>
            <param name="name">Meno hľadaného stĺpca.</param>
            <returns>Index hľadaného stĺpca.</returns>
        </member>
        <member name="M:Kros.Data.BulkActions.IBulkActionDataReader.GetValue(System.Int32)">
            <summary>
            Vráti hodnotu zadaného stĺpca.
            </summary>
            <param name="i">Index stĺpca, ktorého hodnota sa vracia.</param>
            <returns>Objekt - hodnota daného stĺpca.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Zadaný index bol mimo rozsah stĺpcov 0 až <see cref="P:Kros.Data.BulkActions.IBulkActionDataReader.FieldCount"/>.
            </exception>
        </member>
        <member name="M:Kros.Data.BulkActions.IBulkActionDataReader.Read">
            <summary>
            Posunie reader na ďalší záznam.
            </summary>
            <returns><see langword="true"/>, ak existuje ďalší záznam a reader bol posunutý, <see langword="false"/> ak už ďalší záznam neexistuje.
            </returns>
        </member>
        <member name="T:Kros.Data.BulkActions.IBulkInsert">
            <summary>
            Rozhranie pre rýchle hromadné vkladanie dát do databázy.
            </summary>
        </member>
        <member name="P:Kros.Data.BulkActions.IBulkInsert.BatchSize">
            <summary>
            Počet riadkov v dávke, ktorá sa posiela do databázy. Ak je hodnota 0, veľkosť dávky nie je obmedzená.
            </summary>
        </member>
        <member name="P:Kros.Data.BulkActions.IBulkInsert.BulkInsertTimeout">
            <summary>
            Počet sekúnd na dokončenie operácie. ak je hodnota 0, trvanie operácie nie je obmedzené.
            </summary>
        </member>
        <member name="P:Kros.Data.BulkActions.IBulkInsert.DestinationTableName">
            <summary>
            Meno cieľovej tabuľky v databáze.
            </summary>
        </member>
        <member name="M:Kros.Data.BulkActions.IBulkInsert.Insert(Kros.Data.BulkActions.IBulkActionDataReader)">
            <summary>
            Vloží všetky dáta zo zdroja <paramref name="reader"/>.
            </summary>
            <param name="reader">Zdroj dát.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.IBulkInsert.Insert(System.Data.IDataReader)">
            <summary>
            Vloží všetky dáta zo zdroja <paramref name="reader"/>.
            </summary>
            <param name="reader">Zdroj dát.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.IBulkInsert.Insert(System.Data.DataTable)">
            <summary>
            Vloží všetky riadky z tabuľky <paramref name="table"/>.
            </summary>
            <param name="table">Zdrojové dáta.</param>
        </member>
        <member name="T:Kros.Data.BulkActions.IBulkUpdate">
            <summary>
            Rozhranie pre rýchlu hromadnú editáciu dát v databáze.
            </summary>
        </member>
        <member name="P:Kros.Data.BulkActions.IBulkUpdate.DestinationTableName">
            <summary>
            Meno cieľovej tabuľky v databáze.
            </summary>
        </member>
        <member name="P:Kros.Data.BulkActions.IBulkUpdate.TempTableAction">
            <summary>
            Akcia, ktorá sa má vykonať nad tempovou tabuľkou.
            </summary>
            <remarks>
            Akcia, ktorá sa zavolá nad tempovou tabuľkou (chcem ešte dodatočne upraviť dáta).
            <list type="bullet">
            <item>
            <c>IDbConnection</c> - connection nad tempovou tabuľkou
            </item>
            <item>
            <c>IDbTransaction</c> - transakcia nad tempovou tabuľkou,
            </item>
            <item>
            <c>string</c> - názov tempovej tabuľky.
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Kros.Data.BulkActions.IBulkUpdate.PrimaryKeyColumn">
            <summary>
            Primárny kľúč.
            </summary>
        </member>
        <member name="M:Kros.Data.BulkActions.IBulkUpdate.Update(Kros.Data.BulkActions.IBulkActionDataReader)">
            <summary>
            Zedituje všetky dáta zo zdroja <paramref name="reader"/>.
            </summary>
            <param name="reader">Zdroj dát.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.IBulkUpdate.Update(System.Data.IDataReader)">
            <summary>
            Zedituje všetky dáta zo zdroja <paramref name="reader"/>.
            </summary>
            <param name="reader">Zdroj dát.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.IBulkUpdate.Update(System.Data.DataTable)">
            <summary>
            Zedituje všetky riadky z tabuľky <paramref name="table"/>.
            </summary>
            <param name="table">Zdrojové dáta.</param>
        </member>
        <member name="T:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert">
            <summary>
            Trieda umožňujúca rýchle hromadné vkladanie dát pre SQL Server.
            </summary>
        </member>
        <member name="P:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.DefaultBulkCopyOptions">
            <summary>
            Predvolená hodnota <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions"/> pre internú inštanciu <see cref="T:System.Data.SqlClient.SqlBulkCopy"/>, ak sa nepoužíva
            externá transakcia.
            hodnota je <c>SqlBulkCopyOptions.TableLock | SqlBulkCopyOptions.UseInternalTransaction</c>.
            </summary>
        </member>
        <member name="P:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.DefaultBulkCopyOptionsExternalTransaction">
            <summary>
            Predvolená hodnota <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions"/> pre internú inštanciu <see cref="T:System.Data.SqlClient.SqlBulkCopy"/>, ak sa používa
            externá transakcia.
            Hodnota je ako <c>SqlBulkCopyOptions.TableLock</c>.
            </summary>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            Inicializuje novú inštanciu <see cref="T:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert"/> použitím spojenia na databázu
            <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené.
            Ak je na spojení spustená transakcia, mysí sa použiť konštruktor s externou transakciou a tá musí
            byť zadaná.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inicializuje novú inštanciu <see cref="T:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert"/> použitím spojenia na databázu
            <paramref name="connection"/> a externej transakcie <paramref name="externalTransaction"/>.
            </summary>
            <param name="connection">Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené.
            Ak je na spojení spustená transakcia, musí byť zadaná v parametri <paramref name="externalTransaction"/>.</param>
            <param name="externalTransaction">Externá transakcia, v ktorej hromadné vloženie prebehne.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Inicializuje novú inštanciu <see cref="T:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert"/> použitím spojenia na databázu
            <paramref name="connection"/> a zadaných nastavení <paramref name="options"/>.
            </summary>
            <param name="connection">Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené.</param>
            <param name="options">Nastavenia <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions"/>.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Inicializuje novú inštanciu <see cref="T:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert"/> použitím spojenia na databázu
            <paramref name="connection"/>, externej transakcie <paramref name="externalTransaction"/>
            a zadaných nastavení <paramref name="options"/>.
            </summary>
            <param name="connection">Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené.
            Ak je na spojení spustená transakcia, musí byť zadaná v parametri <paramref name="externalTransaction"/>.</param>
            <param name="externalTransaction">Externá transakcia, v ktorej hromadné vloženie prebehne.</param>
            <param name="options">Nastavenia <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions"/>.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.#ctor(System.String)">
            <summary>
            Inicializuje novú inštanciu <see cref="T:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert"/> použitím spojenia na databázu
            <paramref name="connectionString"/>.
            </summary>
            <param name="connectionString">Spojenie na databázu, kam sa vložia dáta.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Inicializuje novú inštanciu <see cref="T:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert"/> použitím spojenia na databázu
            <paramref name="connectionString"/> a zadaných nastavení <paramref name="options"/>.
            </summary>
            <param name="connectionString">Spojenie na databázu, kam sa vložia dáta.</param>
            <param name="options">Nastavenia <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions"/>.</param>
        </member>
        <member name="P:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.ExternalTransaction">
            <summary>
            Externá transakcia, v ktorej sa vykoná vloženie dát.
            </summary>
        </member>
        <member name="P:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.BulkCopyOptions">
            <summary>
            Nastavenia <see cref="P:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.BulkCopyOptions"/> pre internú inštanciu <see cref="T:System.Data.SqlClient.SqlBulkCopy"/>.
            </summary>
        </member>
        <member name="P:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.BatchSize">
            <summary>
            Počet riadkov v dávke, ktorá sa posiela do databázy. Ak je hodnota 0, veľkosť dávky nie je obmedzená.
            </summary>
            <exception cref="T:System.ArgumentException">Zadaná hodnota je záporná.</exception>
        </member>
        <member name="P:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.BulkInsertTimeout">
            <summary>
            Počet sekúnd na dokončenie operácie. ak je hodnota 0, trvanie operácie nie je obmedzené.
            </summary>
            <exception cref="T:System.ArgumentException">Zadaná hodnota je záporná.</exception>
        </member>
        <member name="P:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.DestinationTableName">
            <summary>
            Meno cieľovej tabuľky v databáze.
            </summary>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.Insert(Kros.Data.BulkActions.IBulkActionDataReader)">
            <summary>
            Vloží všetky dáta zo zdroja <paramref name="reader"/>.
            </summary>
            <param name="reader">Zdroj dát.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.Insert(System.Data.IDataReader)">
            <summary>
            Vloží všetky dáta zo zdroja <paramref name="reader"/>.
            </summary>
            <param name="reader">Zdroj dát.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.Insert(System.Data.DataTable)">
            <summary>
            Vloží všetky riadky z tabuľky <paramref name="table"/>.
            </summary>
            <param name="table">Zdrojové dáta.</param>
        </member>
        <member name="T:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate">
            <summary>
            Trieda umožňujúca rýchlu hromadnú editáciu dát pre SQL Server.
            </summary>
            <example>
              <code source="..\Examples\Kros.Utils\BulkUpdateExamples.cs" title="Bulk update" region="BulkUpdate" lang="C#" />
            </example>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            Inicializuje novú inštanciu <see cref="T:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate"/> použitím spojenia na databázu
            <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené.
            Ak je na spojení spustená transakcia, mysí sa použiť konštruktor s externou transakciou a tá musí
            byť zadaná.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inicializuje novú inštanciu <see cref="T:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate"/> použitím spojenia na databázu
            <paramref name="connection"/> a externej transakcie <paramref name="externalTransaction"/>.
            </summary>
            <param name="connection">Spojenie na databázu, kam sa vložia dáta. Spojenie musí byť otvorené.
            Ak je na spojení spustená transakcia, musí byť zadaná v parametri <paramref name="externalTransaction"/>.</param>
            <param name="externalTransaction">Externá transakcia, v ktorej hromadné vloženie prebehne.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.#ctor(System.String)">
            <summary>
            Inicializuje novú inštanciu <see cref="T:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate"/> použitím spojenia na databázu
            <paramref name="connectionString"/>.
            </summary>
            <param name="connectionString">Spojenie na databázu, kam sa vložia dáta.</param>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.CreateBulkInsert">
            <inheritdoc/>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.InvokeAction(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.GetTempTableName">
            <inheritdoc/>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.CreateTempTable(System.Data.IDataReader,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.CreateCommandForPrimaryKey">
            <inheritdoc/>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.UpdateDestinationTable(System.Data.IDataReader,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.DoneTempTable(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Kros.Data.ConnectionHelper">
            <summary>
            Pomocná trieda pre otváranie spojenia na databázu. Trieda pri použití spojenie otvorí, ak je to potrebné a zase
            zatvorí, ak ho otvorila. V prípade, že spojenie už otvorené bolo, nerobí nič.
            </summary>
        </member>
        <member name="M:Kros.Data.ConnectionHelper.OpenConnection(System.Data.IDbConnection)">
            <summary>
            Otvorí spojenie na databázu <paramref name="connection"/>, ak nie je otvorené. Po uvoľnení vráteného objektu
            je spojenie opäť uzatvorené v prípade, že bolo na začiatku otvorené. Ak spojenie už bolo otvorené, nerobí sa nič.
            </summary>
            <param name="connection">Spojenie na databázu, ktoré sa otvorí.</param>
            <returns>
            Objekt, ktorého uvoľnením sa spojenie na databázu zatvorí v prípade, že bolo na začitku otvorené.
            </returns>
        </member>
        <member name="M:Kros.Data.ConnectionHelper.#ctor(System.Data.IDbConnection)">
            <summary>
            Vytvorí inštanciu so zadaným psojením na databázu <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <exception cref="T:System.ArgumentNullException">
            Parameter <paramref name="connection"/> má hodnotu <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Kros.Data.ConnectionHelper.SuspendCore">
            <summary>
            Otvorí spojenie na databázu, ak je zatvorené.
            </summary>
        </member>
        <member name="M:Kros.Data.ConnectionHelper.ResumeCore">
            <summary>
            Zatvorí spojenie na databázu, ak bolo otvorené v <see cref="M:Kros.Data.ConnectionHelper.SuspendCore"/>.
            </summary>
        </member>
        <member name="T:Kros.Data.DataExtensions">
            <summary>
            Rozne rozšírenia dátových tried.
            </summary>
        </member>
        <member name="M:Kros.Data.DataExtensions.IsOpened(System.Data.IDbConnection)">
            <summary>
            Vráti, či je spojenie na databázu otvorené.
            </summary>
            <param name="cn">Spojenie na databázu, ktoré sa testuje.</param>
            <returns><see langword="true"/>, ak spojenie na databázu je otvorené, <see langword="false"/> ak nie je.</returns>
        </member>
        <member name="M:Kros.Data.DataExtensions.SqlServerErrorCode(System.Data.SqlClient.SqlException)">
            <summary>
            Vráti chybový kód výnimky pre SQL Server.
            </summary>
            <param name="ex">Výnimka, ktorej chybový kód sa kontroluje.</param>
            <returns>Vráti chybový kód ako hodnotu enumerátu <see cref="M:Kros.Data.DataExtensions.SqlServerErrorCode(System.Data.SqlClient.SqlException)" />. Ak chybový kód
            je neznámy, alebo nie je definovaný, je vrátená hodnota <see cref="F:Kros.Data.SqlServer.SqlServerErrorCode.Unknown" />.</returns>
            <remarks>
            Metóda pozerá hodnotu <see cref="P:System.Data.SqlClient.SqlError.Number">Number</see> prvej chyby v zozname
            <see cref="P:System.Data.SqlClient.SqlException.Errors">SqlException.Errors</see>.
            </remarks>
        </member>
        <member name="T:Kros.Data.IdGeneratorBase">
            <summary>
            Základná trieda, ktorú stači zdediť aby sme mohli jednoduchšie vytvárať implementácie <see cref="T:Kros.Data.IIdGenerator"/>.
            Stará sa o dispose connection.
            </summary>
            <seealso cref="T:Kros.Data.IIdGenerator" />
        </member>
        <member name="M:Kros.Data.IdGeneratorBase.#ctor(System.Data.Common.DbConnection,System.String,System.Int32)">
            <summary>
            Konštruktor.
            </summary>
            <param name="connection">Connection, ktorá sa použije pre získavanie unikátnych identifikátorov.</param>
            <param name="tableName">Názov tabuľky, pre ktorú generujem identifikátory.</param>
            <param name="bathSize">Veľkosť dávky, ktorú si zarezervuje dopredu.</param>
        </member>
        <member name="M:Kros.Data.IdGeneratorBase.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Konštruktor.
            </summary>
            <param name="connectionString">
            Connection string, ktorý sa použije na vytvorenie conenction pre získavanie unikátnych identifikátorov.
            </param>
            <param name="tableName">Názov tabuľky, pre ktorú generujem identifikátory.</param>
            <param name="batchSize">Veľkosť dávky, ktorú si zarezervuje dopredu.</param>
        </member>
        <member name="M:Kros.Data.IdGeneratorBase.CreateConnection(System.String)">
            <summary>
            Vytvorenie connection.
            </summary>
            <param name="connectionString">Connection string.</param>
            <returns>Špecifická inštancia <see cref="T:System.Data.Common.DbConnection"/>.</returns>
        </member>
        <member name="P:Kros.Data.IdGeneratorBase.TableName">
            <summary>
            Názov tabuľky, pre ktorú generujem identifikátory.
            </summary>
        </member>
        <member name="P:Kros.Data.IdGeneratorBase.BatchSize">
            <summary>
            Veľkosť dávky, ktorú si zarezevuje dopredu.
            </summary>
        </member>
        <member name="P:Kros.Data.IdGeneratorBase.Connection">
            <summary>
            Connection, ktorá sa použije pre získavanie unikátnych identifikátorov.
            </summary>
        </member>
        <member name="M:Kros.Data.IdGeneratorBase.GetNext">
            <inheritdoc/>
        </member>
        <member name="M:Kros.Data.IdGeneratorBase.GetNewIdFromDbCore">
            <summary>
            Získa nový identifikátor z databázy. V tejto metóde je zabezpečné, že spojenie na databázu <see cref="P:Kros.Data.IdGeneratorBase.Connection"/>
            je otvorené.
            </summary>
            <returns>Ďalší identifikátor, ktorý sa môže použiť.</returns>
        </member>
        <member name="M:Kros.Data.IdGeneratorBase.InitDatabaseForIdGenerator">
            <summary>
            Inicializuje databázu tak, aby sa dal v nej používať generátor ID. Znamená to napríklad vytvorenie príslušnej
            tabuľky a stored procedúry.
            </summary>
        </member>
        <member name="T:Kros.Data.IdGeneratorFactories">
            <summary>
            Reprezentuje množinu registrovaných <see cref="T:Kros.Data.IIdGeneratorFactory"/>. Umožňuje ich registráciu a získavanie.
            </summary>
            <seealso cref="T:Kros.Data.IIdGeneratorFactory"/>
            <seealso cref="T:Kros.Data.IIdGenerator"/>
            <seealso cref="T:Kros.Data.IdGeneratorFactories"/>
        </member>
        <member name="M:Kros.Data.IdGeneratorFactories.Register``1(System.String,System.Func{System.Data.Common.DbConnection,Kros.Data.IIdGeneratorFactory},System.Func{System.String,Kros.Data.IIdGeneratorFactory})">
            <summary>
            Registruje factory metódu pre vytvorenie <see cref="T:Kros.Data.IIdGeneratorFactory"/> na základe connection a connection stringu.
            </summary>
            <typeparam name="TConnection">Typ connection.</typeparam>
            <param name="adoClientName">
            Názov ado clienta. (napr. pre <see cref="T:System.Data.SqlClient.SqlConnection"/> to je: System.Data.SqlClient)
            </param>
            <param name="factoryByConnection">
            Factory metóda na vytvorenie <see cref="T:Kros.Data.IIdGeneratorFactory"/> so špecifickým connection stringom.
            </param>
            <param name="factoryByConnectionString">
            Factory metóda na vytvorenie <see cref="T:Kros.Data.IIdGeneratorFactory"/> so špecifickým connection stringom.
            </param>
        </member>
        <member name="M:Kros.Data.IdGeneratorFactories.GetFactory(System.Data.Common.DbConnection)">
            <summary>
            Získanie <see cref="T:Kros.Data.IIdGeneratorFactory"/> so špecifickou connection.
            </summary>
            <param name="connection">Connection, ktorá sa použije pre vykonanie dotazu na získanie identifikátorov.</param>
            <returns>
            Inštancia <see cref="T:Kros.Data.IIdGeneratorFactory"/>.
            </returns>
        </member>
        <member name="M:Kros.Data.IdGeneratorFactories.GetFactory(System.String,System.String)">
            <summary>
            Získanie <see cref="T:Kros.Data.IIdGeneratorFactory"/> so špecifickým connection stringom.
            </summary>
            <param name="connectionString">
            Connection string, na základe ktorého sa vytvorí connection pre vykonanie dotazu na získanie identifikátorov.
            </param>
            <param name="adoClientName">
            Názov ado clienta. (napr. pre <see cref="T:System.Data.SqlClient.SqlConnection"/> to je: System.Data.SqlClient)
            </param>
            <returns>
            Inštancia <see cref="T:Kros.Data.IIdGeneratorFactory"/>.
            </returns>
        </member>
        <member name="T:Kros.Data.IIdGenerator">
            <summary>
            Interfejs popisujúci tiedu, ktorá generuje unikátne identifikátory pre záznamy v tabuľke.
            </summary>
            <remarks>Jedna inštancia generuje vždy pre jednu tabuľku.</remarks>
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:Kros.Data.SqlServer.SqlServerIdGenerator"/>
            <example>
            <code language="cs" source="..\Examples\Kros.Utils\IdGeneratorExamples.cs" region="IdGeneratorFactory"/>
            </example>
        </member>
        <member name="M:Kros.Data.IIdGenerator.GetNext">
            <summary>
            Vráti identifikátor pre ďalší záznam.
            </summary>
            <returns>
            Unikátny identifikátor pre záznam v tabuľke.
            </returns>
        </member>
        <member name="T:Kros.Data.IIdGeneratorFactory">
            <summary>
            Interface popisujúci factory triedu, ktorá vie vytvoriť inštanciu <see cref="T:Kros.Data.IIdGenerator"/>.
            </summary>
            <seealso cref="T:Kros.Data.SqlServer.SqlServerIdGeneratorFactory"/>
            <seealso cref="T:Kros.Data.IdGeneratorFactories"/>
            <example>
            <code language="cs" source="..\Examples\Kros.Utils\IdGeneratorExamples.cs" region="IdGeneratorFactory"/>
            </example>
        </member>
        <member name="M:Kros.Data.IIdGeneratorFactory.GetGenerator(System.String)">
            <summary>
            Vytvorí inštanciu <see cref="T:Kros.Data.IIdGenerator"/> pre generovanie unikátnych identifikátorov pre tabuľku
            <paramref name="tableName"/>.
            </summary>
            <param name="tableName">Názov tabuľky pre ktorú sa budú generovať identifikátory.</param>
            <returns>
            Inštancia <see cref="T:Kros.Data.IIdGenerator"/>.
            </returns>
        </member>
        <member name="M:Kros.Data.IIdGeneratorFactory.GetGenerator(System.String,System.Int32)">
            <summary>
            Vytvorí inštanciu <see cref="T:Kros.Data.IIdGenerator"/> pre generovanie unikátnych identifikátorov pre tabuľku
            <paramref name="tableName"/>.
            Nastaví mu aj dávku, ktorú ma rezervovať. (aby v prípade väčšieho počtu nemusel ísť zakaždým do databázy)
            </summary>
            <param name="tableName">Názov tabuľky pre ktorú sa budú generovať identifikátory.</param>
            <param name="batchSize">Veľkosť dávky, ktorú si zarezervuje dopredu.</param>
            <returns>
            Inštancia <see cref="T:Kros.Data.IIdGenerator"/>.
            </returns>
        </member>
        <member name="T:Kros.Data.Schema.ColumnSchema">
            <summary>
            Schéma stĺpca databázovej tabuľky.
            </summary>
        </member>
        <member name="F:Kros.Data.Schema.ColumnSchema.DefaultDefaultValue">
            <summary>
            Predvolená hodnota stĺpca, ktorá sa použije, ak nie je žiadna definovaná. Hodnota je <see cref="T:System.DBNull"/>.
            </summary>
        </member>
        <member name="F:Kros.Data.Schema.ColumnSchema.DefaultAllowNull">
            <summary>
            Predvolené nastavenie pre <see cref="P:Kros.Data.Schema.ColumnSchema.AllowNull"/>. Hodnota je <see langword="false"/>.
            </summary>
        </member>
        <member name="F:Kros.Data.Schema.ColumnSchema.DefaultSize">
            <summary>
            Predvolená hodnota pre <see cref="P:Kros.Data.Schema.ColumnSchema.Size"/>. Hodnota je <c>0</c>.
            </summary>
        </member>
        <member name="T:Kros.Data.Schema.ColumnSchema.DefaultValues">
            <summary>
            Predvolené hodnoty stĺpcov pre jednotlivé dátové typy:
            <list type="bullet">
            <item>Boolean typ má predvolenú hodnotu <see langword="false"/>.</item>
            <item>Všetky číselné typy majú hodnotu <c>0</c>.</item>
            <item>Dátumové a časové typy sú nastavené na <c>1.1.1900 0:00:00</c></item>
            <item>Textové dátové typy sú nastavené na prázdny reťazec.</item>
            <item>GUID typ je nastavený na prázdny GUID (<see cref="F:System.Guid.Empty"/>)</item>
            </list>
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.ColumnSchema.#ctor(System.String,System.Boolean,System.Object,System.Int32)">
            <summary>
            Vytvorí inštanciu schémy stĺpca s menom <paramref name="name"/> a ostatnými hodnotami.
            </summary>
            <param name="name">Meno stĺpca.</param>
            <param name="allowNull">Určuje, či stĺpec má povolenú <b>NULL</b> hodnotu.</param>
            <param name="defaultValue">Predvolená hodnota stĺpca.</param>
            <param name="size">Maximálna dĺžka textových stĺpcov. Ak je neobmedzená, hodnota je <b>0</b>.</param>
            <exception cref="T:System.ArgumentNullException">Meno stĺpca <paramref name="name"/> má hodnotu <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Meno stĺpca <paramref name="name"/> nie je zadané: je prázdny reťazec,
            alebo reťazec bielych znakov.</exception>
        </member>
        <member name="P:Kros.Data.Schema.ColumnSchema.Table">
            <summary>
            Tabuľka, ktorej stĺpec patrí. Tabuľka je nastavená automaticky pri pridaní stĺpca do zoznamu
            <see cref="T:Kros.Data.Schema.ColumnSchemaCollection"/>.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.ColumnSchema.Name">
            <summary>
            Meno stĺpca.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.ColumnSchema.FullName">
            <summary>
            Plné meno stĺpca aj s názvom tabuľky, ak stĺpec nejakej tabuľke patrí.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.ColumnSchema.AllowNull">
            <summary>
            Určuje, či stĺpec má povolenú <b>NULL</b> hodnotu.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.ColumnSchema.DefaultValue">
            <summary>
            Predvolená hodnota stĺpca.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.ColumnSchema.Size">
            <summary>
            Maximálna dĺžka textových stĺpcov. Ak je neobmedzená, hodnota je <b>0</b>.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.ColumnSchema.DbType">
            <summary>
            Dátový typ stĺpca ako hodnota enumerátu <see cref="P:Kros.Data.Schema.ColumnSchema.DbType"/>.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.ColumnSchema.SetParameterDbType(System.Data.IDataParameter)">
            <summary>
            Parametru <paramref name="param"/> nastaví dátový typ.
            </summary>
            <param name="param">Parameter pre databázové príkazy <see cref="T:System.Data.IDbCommand"/>.</param>
        </member>
        <member name="M:Kros.Data.Schema.ColumnSchema.ToStringDefaultValue">
            <summary>
            Vráti predvolenú hodnotu stĺpca. Tá sapoužije v metóde <see cref="M:Kros.Data.Schema.ColumnSchema.ToString"/>.
            </summary>
            <returns>Ak predvolená hodnota je <see cref="T:System.DBNull"/>, je vrátený reťazec <c>NULL</c>. Inak je vrátená
            samotná predvolená hodnota <see cref="P:Kros.Data.Schema.ColumnSchema.DefaultValue"/>.</returns>
        </member>
        <member name="T:Kros.Data.Schema.ColumnSchemaCollection">
            <summary>
            Zoznam stĺpcov tabuľky <see cref="T:Kros.Data.Schema.TableSchema"/>.
            </summary>
            <remarks>Stĺpcom pridaným do zoznamu je automaticky nastavená tabuľka <see cref="P:Kros.Data.Schema.ColumnSchema.Table"/>.
            Do zoznamu nie je možné pridať stĺpec, ktorý už patrí inej tabuľke. V takom prípade je vyvolaná výnimka
            <see cref="T:System.InvalidOperationException"/>.</remarks>
        </member>
        <member name="M:Kros.Data.Schema.ColumnSchemaCollection.#ctor(Kros.Data.Schema.TableSchema)">
            <summary>
            Vytvorí zoznam stĺpcov pre tabuľku <paramref name="table"/>.
            </summary>
            <param name="table">Tabuľka.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="table"/> je <c>null</c>.</exception>
        </member>
        <member name="P:Kros.Data.Schema.ColumnSchemaCollection.Table">
            <summary>
            Tabuľka, ktorej zoznam stĺpcov patrí.
            </summary>
        </member>
        <member name="T:Kros.Data.Schema.DatabaseSchema">
            <summary>
            Schéma databázy.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchema.#ctor(System.String)">
            <summary>
            Vytvorí inštanciu schémy databázy s menom <paramref name="name"/>.
            </summary>
            <param name="name">Meno databázy.</param>
        </member>
        <member name="P:Kros.Data.Schema.DatabaseSchema.Name">
            <summary>
            Názov databázy.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.DatabaseSchema.Tables">
            <summary>
            Schéma tabuliek databázy.
            </summary>
        </member>
        <member name="T:Kros.Data.Schema.DatabaseSchemaCache">
            <summary>
            Implementácia <see cref="T:Kros.Data.Schema.IDatabaseSchemaCache"/>. Po pridaní loader-ov umožňuje načítavať schému databázy.
            Načítanie schémy je pomalá záležitosť a preto sa načítaná schéma kešuje. Pri ďalšej požiadavke na rovnakú schému
            sa už nenačíta z databázy, ale je vrátená z keše.
            </summary>
            <remarks>
            <para><c>DatabaseSchemaCache</c> je potrebné inicializovať potrebným loaderom <see cref="T:Kros.Data.Schema.IDatabaseSchemaLoader"/>,
            ktorý načíta schému. Zároveň každý loader musí mať špecifikovaný generátor kľúča <see cref="T:Kros.Data.Schema.ISchemaCacheKeyGenerator"/>.
            Generátory kľúča pre rôzne typy databáz musia vytvárať navzájom rôzne kľúče, aby sa nestalo, že dva rôzne generátory
            vygenerujú rovnaký kľúč.</para>
            <para>Pre jednoduché použitie je implementovaná vlastnosť <see cref="P:Kros.Data.Schema.DatabaseSchemaCache.Default">DatabaseSchemaCache.Default</see>
            a nie je tak nutné si vytvárať vlastnú inštanciu keše.</para>
            </remarks>
        </member>
        <member name="P:Kros.Data.Schema.DatabaseSchemaCache.Default">
            <summary>
            Inštancia <c>DatabaseSchemaCache</c> určená na bežné použitie. Štandardne obsahuje loader pre SQL Server
            (<see cref="T:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader">SqlServerSchemaLoader</see>).
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchemaCache.GetSchema(System.Object)">
            <summary>
            Vráti schému databázy pre spojenie <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns>Schéma danej databázy.</returns>
            <exception cref="T:System.InvalidOperationException">Keš neobsahuje loader pre spojenie na databázu
            <paramref name="connection"/>.</exception>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchemaCache.ClearSchema(System.Object)">
            <summary>
            Zruší z keše schému databázy načítanú pre spojenie <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <exception cref="T:System.InvalidOperationException">Keš neobsahuje loader pre spojenie na databázu
            <paramref name="connection"/>.</exception>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchemaCache.ClearAllSchemas">
            <summary>
            Vyčistí celú keš - vymaže všetky načítané schémy.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchemaCache.RefreshSchema(System.Object)">
            <summary>
            Načíta schému databázy pre spojenie <paramref name="connection"/>. Schéma je načítaná priamo z databázy aj v prípade,
            že už je uložená v keši.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns>Schéma danej databázy.</returns>
            <exception cref="T:System.InvalidOperationException">Keš neobsahuje loader pre spojenie na databázu
            <paramref name="connection"/>.</exception>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchemaCache.AddSchemaLoader(Kros.Data.Schema.IDatabaseSchemaLoader,Kros.Data.Schema.ISchemaCacheKeyGenerator)">
            <summary>
            Pridá do keše <paramref name="loader"/> na načítavanie schémy databázy, spolu s generátorom kľúčov pre načítanú
            shému <paramref name="keyGenerator"/>.
            </summary>
            <param name="loader">Loader pre načítavanie schémy databázy.</param>
            <param name="keyGenerator">Generátor kľúča pre schému databázy. Databáza sa interne drží v keši pod vygenerovaným
            kľúčom.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="loader"/> alebo <paramref name="keyGenerator"/>
            je <c>null</c>.</exception>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchemaCache.RemoveSchemaLoader(Kros.Data.Schema.IDatabaseSchemaLoader)">
            <summary>
            Vymaže zadaný <paramref name="loader"/> databázovej schémy.
            </summary>
            <param name="loader">Loader databázovej schémy, ktorý sa má vymazať.</param>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchemaCache.ClearSchemaLoaders">
            <summary>
            Vymaže všetky loader-y schém.
            </summary>
        </member>
        <member name="T:Kros.Data.Schema.DatabaseSchemaLoader">
            <summary>
            Pomocná trieda na jednoduché načítavanie schémy databáz. Obsahuje zoznam loader-ov pre konkrétne databázy a tak
            je možné použiť ju transparentne pre ľubovoľný typ databázy. Pri požiadavke je vždy načítaná aktuálna schéma,
            tzn. schémy sa nekešujú.
            </summary>
            <remarks>
            <para>Trieda obaľuje zoznam loader-ov rôznych typov databáz a umožňuje tak jednoduché načítanie schémy ľubovoľného
            známeho typu. Loadery je možné pridávať metódou <see cref="M:Kros.Data.Schema.DatabaseSchemaLoader.AddSchemaLoader(Kros.Data.Schema.IDatabaseSchemaLoader)">AddSchemaLoader</see>.
            </para>
            <para>Trieda je určená na statické použitie pomocou vlatnosti <see cref="P:Kros.Data.Schema.DatabaseSchemaLoader.Default"/>.
            Štandardne dokáže načítať schémy SQL Server-a a MS Access.</para>
            </remarks>
            <example>
            <code language="cs" source="..\Examples\Kros.Utils\SchemaExamples.cs" region="SchemaLoader"/>
            </example>
        </member>
        <member name="P:Kros.Data.Schema.DatabaseSchemaLoader.Default">
            <summary>
            Inštancia <c>DatabaseSchemaLoader</c> určená na bežné použitie. Štandardne obsahuje loader pre SQL Server
            (<see cref="T:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader">SqlServerSchemaLoader</see>).
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchemaLoader.AddSchemaLoader(Kros.Data.Schema.IDatabaseSchemaLoader)">
            <summary>
            Pridá <paramref name="loader"/> do zoznamu loader-ov.
            </summary>
            <param name="loader">Trieda na načítanie schémy konkrétneho typu databázy.</param>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchemaLoader.RemoveSchemaLoader(Kros.Data.Schema.IDatabaseSchemaLoader)">
            <summary>
            Odstráni zo zoznamu loader-ov zadaný <paramref name="loader"/>.
            </summary>
            <param name="loader">Trieda na načítanie schémy databázy, ktorá sa z interného zoznamu odstráni.</param>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchemaLoader.ClearSchemaLoaders">
            <summary>
            Vymaže všetky loader-y v zozname.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchemaLoader.SupportsConnectionType(System.Object)">
            <summary>
            Kontroluje, či trieda dokáže načítať schému zo zadaného spojenia <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns><see langword="true"/>, ak je možné načítať schému databázy, <see langword="false"/>, ak to možné nie je. Kontroluje sa zoznam
            loader-ov a <see langword="true"/> sa vráti, ak ľubovoľný z nich vie načítať schému so zadaného spojenia.</returns>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchemaLoader.LoadSchema(System.Object)">
            <summary>
            Načíta celú schému databázy určenej spojením <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns>Vráti schému celej databázy.</returns>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="connection"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Nie je možné načítať schému databázy, pretože pre spojenie
            <paramref name="connection"/> neexistuje loader.</exception>
        </member>
        <member name="M:Kros.Data.Schema.DatabaseSchemaLoader.LoadTableSchema(System.Object,System.String)">
            <summary>
            Načíta schému tabuľky <paramref name="tableName"/> z databázy <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <param name="tableName">Meno tabuľky, ktorej schéma sa načíta.</param>
            <returns>Vráti načítanú schému tabuľky, alebo hodnotu <c>null</c>, ak taká tabuľka neexistuje.</returns>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="connection"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Nie je možné načítať schému databázy, pretože pre spojenie
            <paramref name="connection"/> neexistuje loader.</exception>
        </member>
        <member name="T:Kros.Data.Schema.DefaultValueParsers">
            <summary>
            Štandardné parsery pre predvolené hodnoty stĺpcov databáz. Predvolené hodnoty sú v databáze uložené ako reťazec
            a je potrebné ich konvertovať na typ daného stĺpca. Ak sa hodnotu nepodarilo skonvertovať na určený typ,
            vždy je vrátená hodnota <c>null</c>.
            </summary>
        </member>
        <member name="T:Kros.Data.Schema.DefaultValueParsers.ParseDefaultValueFunction">
            <summary>
            Hlavička funkcie, ktorá parsuje predvolenú hodnotu stĺpca.
            </summary>
            <param name="defaultValue">Predvolená hodnota stĺpca ako reťazec.</param>
            <returns>Vráti hodnotu skonvertovanú na potrebný dátový typ, alebo <c>null</c>, ak sa konverzia nepodarila.</returns>
        </member>
        <member name="T:Kros.Data.Schema.IndexType">
            <summary>
            Typ indexu tabuľky.
            </summary>
        </member>
        <member name="F:Kros.Data.Schema.IndexType.Index">
            <summary>
            Obyčajný index.
            </summary>
        </member>
        <member name="F:Kros.Data.Schema.IndexType.UniqueKey">
            <summary>
            Unikátny index.
            </summary>
        </member>
        <member name="F:Kros.Data.Schema.IndexType.PrimaryKey">
            <summary>
            Primárny kľúč tabuľky.
            </summary>
        </member>
        <member name="T:Kros.Data.Schema.SortOrder">
            <summary>
            Zoradenie indexového stĺpca.
            </summary>
        </member>
        <member name="F:Kros.Data.Schema.SortOrder.Ascending">
            <summary>
            Vzostupne - od najmenšej hodnoty po najväčšiu.
            </summary>
        </member>
        <member name="F:Kros.Data.Schema.SortOrder.Descending">
            <summary>
            Zostupne - od najväčšej hodnoty po najmenšiu.
            </summary>
        </member>
        <member name="T:Kros.Data.Schema.ForeignKeyRule">
            <summary>
            Pravidlo cudzieho kľúča - ako sa zachovať k detským záznamom po zmenení/zmazaní hlavného nadradeného.
            </summary>
        </member>
        <member name="F:Kros.Data.Schema.ForeignKeyRule.NoAction">
            <summary>
            Žiadna akcia.
            </summary>
        </member>
        <member name="F:Kros.Data.Schema.ForeignKeyRule.Cascade">
            <summary>
            Zmena v hlavnej tabuľke sa propaguje do detských záznamov.
            </summary>
        </member>
        <member name="F:Kros.Data.Schema.ForeignKeyRule.SetNull">
            <summary>
            Pri zmene hlavného záznamu sa cudzí kľúč v detských záznamoch nastaví na <c>NULL</c>.
            </summary>
        </member>
        <member name="F:Kros.Data.Schema.ForeignKeyRule.SetDefault">
            <summary>
            Pri zmene hlavného záznamu sa cudzí kľúč v detských záznamoch nastaví na predvolenú hodnotu stĺpca.
            </summary>
        </member>
        <member name="T:Kros.Data.Schema.ForeignKeySchema">
            <summary>
            Schéma cudzieho kľúča tabuľky.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.ForeignKeySchema.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Vytvorí novú definíciu cudzieho kľúča s menom <paramref name="name"/>. Cudzí kľúč je nad stĺpcom
            <paramref name="foreignKeyTableColumn"/> tabuľky <paramref name="foreignKeyTableName"/> a odkazuje sa na
            stĺpec <paramref name="primaryKeyTableColumn"/> tabuľky <paramref name="primaryKeyTableName"/>.
            </summary>
            <param name="name">Meno cudzieho kľúča.</param>
            <param name="primaryKeyTableName">Meno tabuľky s primárnym kľúčom.</param>
            <param name="primaryKeyTableColumn">Meno odkazovaného stĺpca v tabuľke s primárnym kľúčom.</param>
            <param name="foreignKeyTableName">Meno tabuľky s cudzím kľúčom.</param>
            <param name="foreignKeyTableColumn">Meno stĺpca v tabuľke cudzieho kľúča.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota ľubovoľného parametra je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota ľubovoľného parametra je prázdny reťazec, alebo reťazec bielych znakov.
            </exception>
        </member>
        <member name="M:Kros.Data.Schema.ForeignKeySchema.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Vytvorí novú definíciu cudzieho kľúča s menom <paramref name="name"/>. Cudzí kľúč je nad stĺpcami
            <paramref name="foreignKeyTableColumns"/> tabuľky <paramref name="foreignKeyTableName"/> a odkazuje sa na
            stĺpce <paramref name="primaryKeyTableColumns"/> tabuľky <paramref name="primaryKeyTableName"/>.
            </summary>
            <param name="name">Meno cudzieho kľúča.</param>
            <param name="primaryKeyTableName">Meno tabuľky s primárnym kľúčom.</param>
            <param name="primaryKeyTableColumns">Zoznam odkazovaných stĺpcov v tabuľke s primárnym kľúčom.</param>
            <param name="foreignKeyTableName">Meno tabuľky s cudzím kľúčom.</param>
            <param name="foreignKeyTableColumns">Zoznam stĺpcov v tabuľke cudzieho kľúča.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota ľubovoľného parametra je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><list type="bullet">
            <item>Hodnota parametrov <paramref name="name"/>, <paramref name="primaryKeyTableName"/> alebo
            <paramref name="foreignKeyTableName"/> je prázdny reťazec, alebo reťazec bielych znakov.</item>
            <item>Zoznam stĺpcov <paramref name="primaryKeyTableColumns"/> alebo <paramref name="foreignKeyTableColumns"/>
            je prázdny.</item>
            </list></exception>
        </member>
        <member name="P:Kros.Data.Schema.ForeignKeySchema.Name">
            <summary>
            Meno cudzieho kľúča.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.ForeignKeySchema.PrimaryKeyTableName">
            <summary>
            Meno tabuľky z ktorej je primárny kľúč.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.ForeignKeySchema.PrimaryKeyTableColumns">
            <summary>
            Zoznam stĺpcov tabuľky z ktorej je primárny kľúč.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.ForeignKeySchema.ForeignKeyTableName">
            <summary>
            Meno tabuľky, v ktorej je definovaný cudzí kľúč.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.ForeignKeySchema.ForeignKeyTableColumns">
            <summary>
            Zoznam stĺpcov cudzieho kľúča v tabuľke, kde je definovaný.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.ForeignKeySchema.DeleteRule">
            <summary>
            Pravidlo ako sa správať, ak je v hlavnej tabuľke vymazaný príslušný záznam.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.ForeignKeySchema.UpdateRule">
            <summary>
            Pravidlo ako sa správať, ak je v hlavnej tabuľke aktualizovaný príslušný záznam.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.ForeignKeySchema.Table">
            <summary>
            Tabuľka, ktorej cudzí kľúč patrí.
            </summary>
        </member>
        <member name="T:Kros.Data.Schema.ForeignKeySchemaCollection">
            <summary>
            Zoznam cudzích kľúčov tabuľky <see cref="T:Kros.Data.Schema.TableSchema"/>.
            </summary>
            <remarks>Cudzím kľúčom pridaným do zoznamu je automaticky nastavená tabuľka <see cref="P:Kros.Data.Schema.IndexSchema.Table"/>.
            Do zoznamu nie je možné pridať cudzí kľúč, ktorý už patrí inej tabuľke. V takom prípade je vyvolaná výnimka
            <see cref="T:System.InvalidOperationException"/>.</remarks>
        </member>
        <member name="M:Kros.Data.Schema.ForeignKeySchemaCollection.#ctor(Kros.Data.Schema.TableSchema)">
            <summary>
            Vytvorí zoznam cudzích kľúčov pre tabuľku <paramref name="table"/>.
            </summary>
            <param name="table">Tabuľka.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="table"/> je <c>null</c>.</exception>
        </member>
        <member name="P:Kros.Data.Schema.ForeignKeySchemaCollection.Table">
            <summary>
            Tabuľka, ktorej zoznam cudzích kľúčov patrí.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.ForeignKeySchemaCollection.Add(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Vytvorí a pridá do zoznamu novú definíciu cudzieho kľúča s menom <paramref name="name"/>. Cudzí kľúč je nad stĺpcom
            <paramref name="foreignKeyTableColumn"/> tabuľky <paramref name="foreignKeyTableName"/> a odkazuje sa na
            stĺpec <paramref name="primaryKeyTableColumn"/> tabuľky <paramref name="primaryKeyTableName"/>.
            </summary>
            <param name="name">Meno cudzieho kľúča.</param>
            <param name="primaryKeyTableName">Meno tabuľky s primárnym kľúčom.</param>
            <param name="primaryKeyTableColumn">Meno odkazovaného stĺpca v tabuľke s primárnym kľúčom.</param>
            <param name="foreignKeyTableName">Meno tabuľky s cudzím kľúčom.</param>
            <param name="foreignKeyTableColumn">Meno stĺpca v tabuľke cudzieho kľúča.</param>
            <returns>Vytvorený cudzí kľúč.</returns>
            <exception cref="T:System.ArgumentNullException">Hodnota ľubovoľného parametra je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota ľubovoľného parametra je prázdny reťazec, alebo reťazec bielych znakov.
            </exception>
        </member>
        <member name="M:Kros.Data.Schema.ForeignKeySchemaCollection.Add(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Vytvorí a pridá do zoznamu novú definíciu cudzieho kľúča s menom <paramref name="name"/>. Cudzí kľúč je nad stĺpcami
            <paramref name="foreignKeyTableColumns"/> tabuľky <paramref name="foreignKeyTableName"/> a odkazuje sa na
            stĺpce <paramref name="primaryKeyTableColumns"/> tabuľky <paramref name="primaryKeyTableName"/>.
            </summary>
            <param name="name">Meno cudzieho kľúča.</param>
            <param name="primaryKeyTableName">Meno tabuľky s primárnym kľúčom.</param>
            <param name="primaryKeyTableColumns">Zoznam odkazovaných stĺpcov v tabuľke s primárnym kľúčom.</param>
            <param name="foreignKeyTableName">Meno tabuľky s cudzím kľúčom.</param>
            <param name="foreignKeyTableColumns">Zoznam stĺpcov v tabuľke cudzieho kľúča.</param>
            <returns>Vytvorený cudzí kľúč.</returns>
            <exception cref="T:System.ArgumentNullException">Hodnota ľubovoľného parametra je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><list type="bullet">
            <item>Hodnota parametrov <paramref name="name"/>, <paramref name="primaryKeyTableName"/> alebo
            <paramref name="foreignKeyTableName"/> je prázdny reťazec, alebo reťazec bielych znakov.</item>
            <item>Zoznam stĺpcov <paramref name="primaryKeyTableColumns"/> alebo <paramref name="foreignKeyTableColumns"/>
            je prázdny.</item>
            </list></exception>
        </member>
        <member name="T:Kros.Data.Schema.IDatabaseSchemaCache">
            <summary>
            Rozhranie pre triedy načítavajúce a kešujúce schému databázy.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.IDatabaseSchemaCache.GetSchema(System.Object)">
            <summary>
            Vráti schému databázy pre spojenie <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns>Schéma danej databázy.</returns>
        </member>
        <member name="M:Kros.Data.Schema.IDatabaseSchemaCache.ClearSchema(System.Object)">
            <summary>
            Zruší z keše schému databázy načítanú pre spojenie <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
        </member>
        <member name="M:Kros.Data.Schema.IDatabaseSchemaCache.ClearAllSchemas">
            <summary>
            Vyčistí celú keš - vymaže všetky načítané schémy.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.IDatabaseSchemaCache.RefreshSchema(System.Object)">
            <summary>
            Načíta schému databázy pre spojenie <paramref name="connection"/>. Schéma je načítaná priamo z databázy aj v prípade,
            že už je uložená v keši.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns>Schéma danej databázy.</returns>
        </member>
        <member name="T:Kros.Data.Schema.IDatabaseSchemaLoader">
            <summary>
            Rozhranie pre triedy, načítavajúce schému databázy.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.IDatabaseSchemaLoader.SupportsConnectionType(System.Object)">
            <summary>
            Kontroluje, či trieda dokáže načítať schému zo zadaného spojenia <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns><see langword="true"/>, ak je možné načítať schému databázy, <see langword="false"/>, ak to možné nie je.</returns>
        </member>
        <member name="M:Kros.Data.Schema.IDatabaseSchemaLoader.LoadSchema(System.Object)">
            <summary>
            Načíta celú schému databázy určenej spojením <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns>Vráti schému celej databázy.</returns>
        </member>
        <member name="M:Kros.Data.Schema.IDatabaseSchemaLoader.LoadTableSchema(System.Object,System.String)">
            <summary>
            Načíta schému tabuľky <paramref name="tableName"/> z databázy <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <param name="tableName">Meno tabuľky, ktorej schéma sa načíta.</param>
            <returns>Vráti načítanú schému tabuľky, alebo hodnotu <c>null</c>, ak taká tabuľka neexistuje.</returns>
        </member>
        <member name="T:Kros.Data.Schema.IDatabaseSchemaLoader`1">
            <summary>
            Rozhranie pre triedy, načítavajúce schému databázy.
            </summary>
            <typeparam name="T">Typ spojenia na databázu, s ktorým pracuje daná trieda.</typeparam>
        </member>
        <member name="M:Kros.Data.Schema.IDatabaseSchemaLoader`1.SupportsConnectionType(`0)">
            <summary>
            Kontroluje, či trieda dokáže načítať schému zo zadaného spojenia <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns><see langword="true"/>, ak je možné načítať schému databázy, <see langword="false"/>, ak to možné nie je.</returns>
        </member>
        <member name="M:Kros.Data.Schema.IDatabaseSchemaLoader`1.LoadSchema(`0)">
            <summary>
            Načíta celú schému databázy určenej spojením <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns>Vráti schému celej databázy.</returns>
        </member>
        <member name="M:Kros.Data.Schema.IDatabaseSchemaLoader`1.LoadTableSchema(`0,System.String)">
            <summary>
            Načíta schému tabuľky <paramref name="tableName"/> z databázy <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <param name="tableName">Meno tabuľky, ktorej schéma sa načíta.</param>
            <returns>Vráti načítanú schému tabuľky, alebo hodnotu <c>null</c>, ak taká tabuľka neexistuje.</returns>
        </member>
        <member name="T:Kros.Data.Schema.IndexColumnSchema">
            <summary>
            Schéma stĺpca v indexe tabuľky.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.IndexColumnSchema.#ctor(System.String)">
            <summary>
            Vytvorí inštanciu indexového stĺpca s menom <paramref name="name"/>.
            Zoradenie stĺpca je <see cref="F:Kros.Data.Schema.SortOrder.Ascending">SortOrder.Ascending</see>.
            </summary>
            <param name="name">Meno stĺpca v indexe.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="name"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota <paramref name="name"/> je prázdny reťazec, alebo reťazec bielych znakov.
            </exception>
        </member>
        <member name="M:Kros.Data.Schema.IndexColumnSchema.#ctor(System.String,Kros.Data.Schema.SortOrder)">
            <summary>
            Vytvorí inštanciu indexového stĺpca s menom <paramref name="name"/> a zoradením <paramref name="order"/>.
            </summary>
            <param name="name">Meno stĺpca v indexe.</param>
            <param name="order">Zoradenie stĺpca v indexe.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="name"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota <paramref name="name"/> je prázdny reťazec, alebo reťazec bielych znakov.
            </exception>
        </member>
        <member name="P:Kros.Data.Schema.IndexColumnSchema.Name">
            <summary>
            Meno stĺpca v indexe.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.IndexColumnSchema.Order">
            <summary>
            Zoradenie stĺpca v indexe.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.IndexColumnSchema.Index">
            <summary>
            Index, ktorému stĺpec patrí.
            </summary>
        </member>
        <member name="T:Kros.Data.Schema.IndexColumnSchemaCollection">
            <summary>
            Zoznam stĺpcov indexu tabuľky.
            </summary>
            <remarks>Stĺpcom pridaným do zoznamu je automaticky nastavený index <see cref="P:Kros.Data.Schema.IndexColumnSchema.Index"/>.
            Do zoznamu nie je možné pridať stĺpec, ktorý už patrí inému indexu. V takom prípade je vyvolaná výnimka
            <see cref="T:System.InvalidOperationException"/>.</remarks>
        </member>
        <member name="M:Kros.Data.Schema.IndexColumnSchemaCollection.#ctor(Kros.Data.Schema.IndexSchema)">
            <summary>
            Vytvorí zoznam stĺpcov pre index <paramref name="index"/>.
            </summary>
            <param name="index">Index.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="index"/> je <c>null</c>.</exception>
        </member>
        <member name="P:Kros.Data.Schema.IndexColumnSchemaCollection.Index">
            <summary>
            Index, ktorému zoznam patrí.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.IndexColumnSchemaCollection.Add(System.String)">
            <summary>
            Vytvorí nový stĺpec v zozname s menom <paramref name="columnName"/> a zoradením
            <see cref="F:Kros.Data.Schema.SortOrder.Ascending">SortOrder.Ascending</see>.
            </summary>
            <param name="columnName">Meno stĺpca.</param>
            <returns>Vytvorený stĺpec.</returns>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="columnName"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota <paramref name="columnName"/> je prázdny reťazec, alebo reťazec bielych
            znakov.</exception>
        </member>
        <member name="M:Kros.Data.Schema.IndexColumnSchemaCollection.Add(System.String,Kros.Data.Schema.SortOrder)">
            <summary>
            Vytvorí nový stĺpec v zozname s menom <paramref name="columnName"/> a zoradením <paramref name="order"/>.
            </summary>
            <param name="columnName">Meno stĺpca.</param>
            <param name="order">Zoradenie stĺpca.</param>
            <returns>Vytvorený stĺpec.</returns>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="columnName"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota <paramref name="columnName"/> je prázdny reťazec, alebo reťazec bielych
            znakov.</exception>
        </member>
        <member name="T:Kros.Data.Schema.IndexSchema">
            <summary>
            Schéma indexu tabuľky.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.IndexSchema.#ctor(System.String)">
            <summary>
            Vytvorí schmému indexu typu <see cref="F:Kros.Data.Schema.IndexType.Index">IndexType.Index</see> s menom <paramref name="indexName"/>.
            </summary>
            <param name="indexName">Meno indexu. Musí byť zadané.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="indexName"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota <paramref name="indexName"/> je prázdny reťazec, alebo reťazec bielych
            znakov.</exception>
        </member>
        <member name="M:Kros.Data.Schema.IndexSchema.#ctor(System.String,Kros.Data.Schema.IndexType)">
            <summary>
            Vytvorí schmému indexu typu <paramref name="indexType"/> s menom <paramref name="indexName"/>.
            </summary>
            <param name="indexName">Meno indexu. Musí byť zadané.</param>
            <param name="indexType">Typ indexu.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="indexName"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota <paramref name="indexName"/> je prázdny reťazec, alebo reťazec bielych
            znakov.</exception>
        </member>
        <member name="M:Kros.Data.Schema.IndexSchema.#ctor(System.String,Kros.Data.Schema.IndexType,System.Boolean)">
            <summary>
            Vytvorí schmému indexu typu <paramref name="indexType"/> s menom <paramref name="indexName"/>
            a nastavením či je <paramref name="clustered"/>.
            </summary>
            <param name="indexName">Meno indexu. Musí byť zadané.</param>
            <param name="indexType">Typ indexu.</param>
            <param name="clustered">Určuje, či je index <c>CLUSTERED</c>.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="indexName"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota <paramref name="indexName"/> je prázdny reťazec, alebo reťazec bielych
            znakov.</exception>
        </member>
        <member name="P:Kros.Data.Schema.IndexSchema.Name">
            <summary>
            Meno indexu. Ak index už patrí nejakej tabuľke (hodnota <see cref="P:Kros.Data.Schema.IndexSchema.Table"/> je nastavená), meno indexu nie je možné
            zmeniť. V takom prípade je vyvolaná výnimka <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.IndexSchema.IndexType">
            <summary>
            Typ indexu.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.IndexSchema.Clustered">
            <summary>
            Určuje, či je index <c>CLUSTERED</c>.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.IndexSchema.Columns">
            <summary>
            Zoznam stĺpcov indexu.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.IndexSchema.Table">
            <summary>
            Tabuľka, ktorej index patrí.
            </summary>
        </member>
        <member name="T:Kros.Data.Schema.IndexSchemaCollection">
            <summary>
            Zoznam indexov tabuľky <see cref="T:Kros.Data.Schema.TableSchema"/>.
            </summary>
            <remarks>Indexom pridaným do zoznamu je automaticky nastavená tabuľka <see cref="P:Kros.Data.Schema.IndexSchema.Table"/>.
            Do zoznamu nie je možné pridať index, ktorý už patrí inej tabuľke. V takom prípade je vyvolaná výnimka
            <see cref="T:System.InvalidOperationException"/>.</remarks>
        </member>
        <member name="M:Kros.Data.Schema.IndexSchemaCollection.#ctor(Kros.Data.Schema.TableSchema)">
            <summary>
            Vytvorí zoznam stĺpcov pre tabuľku <paramref name="table"/>.
            </summary>
            <param name="table">Tabuľka.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="table"/> je <c>null</c>.</exception>
        </member>
        <member name="P:Kros.Data.Schema.IndexSchemaCollection.Table">
            <summary>
            Tabuľka, ktorej zoznam stĺpcov patrí.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.IndexSchemaCollection.Add(System.String)">
            <summary>
            Vytvorí a pridá do zoznamu novú schému indexu s menom <paramref name="indexName"/>.
            </summary>
            <param name="indexName">Meno indexu.</param>
            <returns>Vytvorenú schému indexu.</returns>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="indexName"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota <paramref name="indexName"/> je prázdny reťazec, alebo reťazec bielych
            znakov.</exception>
        </member>
        <member name="M:Kros.Data.Schema.IndexSchemaCollection.Add(System.String,Kros.Data.Schema.IndexType)">
            <summary>
            Vytvorí a pridá do zoznamu novú schému indexu s menom <paramref name="indexName"/>
            a typom <paramref name="indexType"/>.
            </summary>
            <param name="indexName">Meno indexu.</param>
            <param name="indexType">Typ indexu.</param>
            <returns>Vytvorenú schému indexu.</returns>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="indexName"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota <paramref name="indexName"/> je prázdny reťazec, alebo reťazec bielych
            znakov.</exception>
        </member>
        <member name="M:Kros.Data.Schema.IndexSchemaCollection.Add(System.String,Kros.Data.Schema.IndexType,System.Boolean)">
            <summary>
            Vytvorí a pridá do zoznamu novú schému indexu s menom <paramref name="indexName"/>,
            typom <paramref name="indexType"/> a príznakom <paramref name="clustered"/>.
            </summary>
            <param name="indexName">Meno indexu.</param>
            <param name="indexType">Typ indexu.</param>
            <param name="clustered">Príznak, či index je <c>CLUSTERED</c>.</param>
            <returns>Vytvorenú schému indexu.</returns>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="indexName"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota <paramref name="indexName"/> je prázdny reťazec, alebo reťazec bielych
            znakov.</exception>
        </member>
        <member name="T:Kros.Data.Schema.ISchemaCacheKeyGenerator">
            <summary>
            Generátor kľúča pre spojenie na databázu. Používa ho <see cref="T:Kros.Data.Schema.DatabaseSchemaCache"/>.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.ISchemaCacheKeyGenerator.GenerateKey(System.Object)">
            <summary>
            Vygeneruje kľúč pre spojenie <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns>Reťazec.</returns>
        </member>
        <member name="T:Kros.Data.Schema.ISchemaCacheKeyGenerator`1">
            <summary>
            Generátor kľúča pre spojenie na databázu. Používa ho <see cref="T:Kros.Data.Schema.DatabaseSchemaCache"/>.
            </summary>
            <typeparam name="T">Typ spojenia na databázu.</typeparam>
        </member>
        <member name="M:Kros.Data.Schema.ISchemaCacheKeyGenerator`1.GenerateKey(`0)">
            <summary>
            Vygeneruje kľúč pre spojenie <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns>Reťazec.</returns>
        </member>
        <member name="T:Kros.Data.Schema.SqlServer.SqlServerCacheKeyGenerator">
            <summary>
            Generátor kľúča pre SQL Server databázu.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerCacheKeyGenerator.GenerateKey(System.Data.SqlClient.SqlConnection)">
            <summary>
            Vygeneruje kľúč pre spojenie <paramref name="connection"/>. Kľúč je vygenerovaný v tvare <b>SERVER\databáza</b>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns>Reťazec.</returns>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="connection"/> je <c>null</c>.</exception>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerCacheKeyGenerator.Kros#Data#Schema#ISchemaCacheKeyGenerator#GenerateKey(System.Object)">
            <summary>
            Vygeneruje kľúč pre spojenie <paramref name="connection"/>. Kľúč je vygenerovaný v tvare <b>SERVER\databáza</b>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns>Reťazec.</returns>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="connection"/> je <c>null</c>.</exception>
        </member>
        <member name="T:Kros.Data.Schema.SqlServer.SqlServerColumnSchema">
            <summary>
            Schéma stĺpca tabuľky pre SQL Server.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerColumnSchema.#ctor(System.String)">
            <summary>
            Vytvorí inštanciu schémy stĺpca s menom <paramref name="name"/>.
            </summary>
            <param name="name">Meno stĺpca.</param>
            <exception cref="T:System.ArgumentNullException">Meno stĺpca <paramref name="name"/> má hodnotu <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Meno stĺpca <paramref name="name"/> nie je zadané: je prázdny reťazec,
            alebo reťazec bielych znakov.</exception>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerColumnSchema.#ctor(System.String,System.Boolean)">
            <summary>
            Vytvorí inštanciu schémy stĺpca s menom <paramref name="name"/> a s povolením <b>NULL</b> hodnôt podľa
            <paramref name="allowNull"/>.
            </summary>
            <param name="name">Meno stĺpca.</param>
            <param name="allowNull">Určuje, či stĺpec má povolenú <b>NULL</b> hodnotu.</param>
            <exception cref="T:System.ArgumentNullException">Meno stĺpca <paramref name="name"/> má hodnotu <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Meno stĺpca <paramref name="name"/> nie je zadané: je prázdny reťazec,
            alebo reťazec bielych znakov.</exception>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerColumnSchema.#ctor(System.String,System.Boolean,System.Object)">
            <summary>
            Vytvorí inštanciu schémy stĺpca s menom <paramref name="name"/> a ostatnými hodnotami.
            </summary>
            <param name="name">Meno stĺpca.</param>
            <param name="allowNull">Určuje, či stĺpec má povolenú <b>NULL</b> hodnotu.</param>
            <param name="defaultValue">Predvolená hodnota stĺpca.</param>
            <exception cref="T:System.ArgumentNullException">Meno stĺpca <paramref name="name"/> má hodnotu <c>null</c>
            alebo je to reťazec bielych znakov.</exception>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerColumnSchema.#ctor(System.String,System.Boolean,System.Object,System.Int32)">
            <summary>
            Vytvorí inštanciu schémy stĺpca s menom <paramref name="name"/> a ostatnými hodnotami.
            </summary>
            <param name="name">Meno stĺpca.</param>
            <param name="allowNull">Určuje, či stĺpec má povolenú <b>NULL</b> hodnotu.</param>
            <param name="defaultValue">Predvolená hodnota stĺpca.</param>
            <param name="size">Maximálna dĺžka textových stĺpcov. Ak je neobmedzená, hodnota je <b>0</b>.</param>
            <exception cref="T:System.ArgumentNullException">Meno stĺpca <paramref name="name"/> má hodnotu <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Meno stĺpca <paramref name="name"/> nie je zadané: je prázdny reťazec,
            alebo reťazec bielych znakov.</exception>
        </member>
        <member name="P:Kros.Data.Schema.SqlServer.SqlServerColumnSchema.SqlDbType">
            <summary>
            Dátový typ stĺpca ako hodnota enumerátu <see cref="P:Kros.Data.Schema.SqlServer.SqlServerColumnSchema.SqlDbType"/>.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.SqlServer.SqlServerColumnSchema.DbType">
            <inheritdoc/>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerColumnSchema.SetParameterDbType(System.Data.IDataParameter)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">Hodnota <paramref name="param"/> nie je typu <see cref="T:System.Data.SqlClient.SqlParameter"/>.
            </exception>
        </member>
        <member name="T:Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs">
            <summary>
            Argumenty pre udalosť <see cref="E:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ParseDefaultValue"/>.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.#ctor(System.String,System.String,System.Data.SqlDbType,System.String,System.Object)">
            <summary>
            Vytvorí a inicializuje inštanciu argumentov.
            </summary>
            <param name="tableName">Meno tabuľky ktorej schéma sa načítava.</param>
            <param name="columnName">Meno stĺpca, ktorého predvolená hodnota sa parsuje.</param>
            <param name="sqlDbType">Dátový typ stĺpca, ktorého predvolená hodnota sa parsuje.</param>
            <param name="defaultValueString">Predvolená hodnota stĺpca - reťazec, ktorý sa parsuje.</param>
            <param name="defaultValue">Hodnota, ktorá bola získaná štandardným parserom.</param>
        </member>
        <member name="P:Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.TableName">
            <summary>
            Meno tabuľky ktorej schéma sa načítava.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.ColumnName">
            <summary>
            Meno stĺpca, ktorého predvolená hodnota sa parsuje.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.SqlDbType">
            <summary>
            Dátový typ stĺpca, ktorého predvolená hodnota sa parsuje.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.DefaultValueString">
            <summary>
            Predvolená hodnota stĺpca - reťazec, ktorý sa parsuje.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.DefaultValue">
            <summary>
            Hodnota, ktorá bola získaná štandardným parserom. Pri vlastnej obsluhe je potrebné tu nastaviť vlastnú hodnotu.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.Handled">
            <summary>
            Je potrebné nastaviť na <see langword="true"/>, ak bola v obsluhe udalosti nastavená vlastná hodnota <see cref="P:Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.DefaultValue"/>.
            </summary>
        </member>
        <member name="T:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader">
            <summary>
            Implementácia <see cref="T:Kros.Data.Schema.IDatabaseSchemaLoader`1"/>, ktorá načítava schému SQL Server databáz.
            </summary>
        </member>
        <member name="E:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ParseDefaultValue">
            <summary>
            Udalosť vyvolaná pri parsovaní predvolenej hodnoty stĺpca. V obsluhe je možné predvolenú hodnotu parsovať
            vlastným spôsobom, ak interné parsovanie zlyhalo.
            </summary>
            <remarks>V obsluhe udalosti je možné spraviť vlatné parsovanie predvolenej hodnoty stĺpca. Ak je v obsluhe
            predvolená hodnota rozparsovaná, je potrebné ju nastaviť v argumente
            <see cref="P:Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.DefaultValue"/> a zároveň je potrebné nastaviť
            <see cref="P:Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.Handled"/> na <see langword="true"/>.</remarks>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.OnParseDefaultValue(Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs)">
            <summary>
            Vyvolá udalosť <see cref="E:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ParseDefaultValue"/> s argumentami <paramref name="e"/>.
            </summary>
            <param name="e">Argumenty udalosti.</param>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.Kros#Data#Schema#IDatabaseSchemaLoader#SupportsConnectionType(System.Object)">
            <summary>
            Kontroluje, či dokáže načítať schému zo spojenia <paramref name="connection"/>, tzn. či zadané spojenie je
            spojenie na SQL Server databázu.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns><see langword="true"/>, ak je možné načítať schému databázy, <see langword="false"/>, ak to možné nie je.</returns>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.Kros#Data#Schema#IDatabaseSchemaLoader#LoadSchema(System.Object)">
            <summary>
            Načíta celú schému databázy určenej spojením <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns>Vráti schému celej databázy.</returns>
            <remarks>Štandardne sa na získanie schémy vytvorí nové spojenie na databázu podľa vstupného spojenia
            <paramref name="connection"/>. Ak je však vstupné spojenie exkluzívne, použije sa priamo.</remarks>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="connection"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><list type="bullet">
            <item>Spojenie <paramref name="connection"/> nie je spojenie na SQL Server databázu.</item>
            <item>Spojenie <paramref name="connection"/> nemá nastavené meno databázy (<b>Initial Catalog</b>).</item>
            </list></exception>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.Kros#Data#Schema#IDatabaseSchemaLoader#LoadTableSchema(System.Object,System.String)">
            <summary>
            Načíta schému tabuľky <paramref name="tableName"/> z databázy <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <param name="tableName">Meno tabuľky, ktorej schéma sa načíta.</param>
            <returns>Vráti načítanú schému tabuľky, alebo hodnotu <c>null</c>, ak taká tabuľka neexistuje.</returns>
            <remarks>Štandardne sa na získanie schémy vytvorí nové spojenie na databázu podľa vstupného spojenia
            <paramref name="connection"/>. Ak je však vstupné spojenie exkluzívne, použije sa priamo.</remarks>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="connection"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><list type="bullet">
            <item>Spojenie <paramref name="connection"/> nie je spojenie na SQL Server databázu.</item>
            <item>Spojenie <paramref name="connection"/> nemá nastavené meno databázy (<b>Initial Catalog</b>).</item>
            <item>Názov tabuľky <paramref name="tableName"/> má hodnotu <c>null</c>, alebo je to prázdny reťazec,
            alebo je zložený len z bielych znakov.</item>
            </list></exception>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.SupportsConnectionType(System.Data.SqlClient.SqlConnection)">
            <summary>
            Kontroluje, či dokáže načítať schému zo spojenia <paramref name="connection"/>, tzn. či zadané spojenie je
            spojenie na SQL Server databázu.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns><see langword="true"/>, ak je možné načítať schému databázy, <see langword="false"/>, ak to možné nie je.</returns>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.LoadSchema(System.Data.SqlClient.SqlConnection)">
            <summary>
            Načíta celú schému databázy určenej spojením <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <returns>Vráti schému celej databázy.</returns>
            <remarks>Štandardne sa na získanie schémy vytvorí nové spojenie na databázu podľa vstupného spojenia
            <paramref name="connection"/>. Ak je však vstupné spojenie exkluzívne, použije sa priamo.</remarks>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="connection"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><list type="bullet">
            <item>Spojenie <paramref name="connection"/> nie je spojenie na SQL Server databázu.</item>
            <item>Spojenie <paramref name="connection"/> nemá nastavené meno databázy (<b>Initial Catalog</b>).</item>
            </list></exception>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.LoadTableSchema(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Načíta schému tabuľky <paramref name="tableName"/> z databázy <paramref name="connection"/>.
            </summary>
            <param name="connection">Spojenie na databázu.</param>
            <param name="tableName">Meno tabuľky, ktorej schéma sa načíta.</param>
            <returns>Vráti načítanú schému tabuľky, alebo hodnotu <c>null</c>, ak taká tabuľka neexistuje.</returns>
            <remarks>Štandardne sa na získanie schémy vytvorí nové spojenie na databázu podľa vstupného spojenia
            <paramref name="connection"/>. Ak je však vstupné spojenie exkluzívne, použije sa priamo.</remarks>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="connection"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><list type="bullet">
            <item>Spojenie <paramref name="connection"/> nie je spojenie na SQL Server databázu.</item>
            <item>Spojenie <paramref name="connection"/> nemá nastavené meno databázy (<b>Initial Catalog</b>).</item>
            <item>Názov tabuľky <paramref name="tableName"/> má hodnotu <c>null</c>, alebo je to prázdny reťazec,
            alebo je zložený len z bielych znakov.</item>
            </list></exception>
        </member>
        <member name="M:Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.GetDefaultValueString(System.String)">
            <summary>
            Upraví reťazec <paramref name="rawDefaultValueString"/> tak, aby z neho bolo možné získať predvolenú hodnotu stĺpca.
            </summary>
            <param name="rawDefaultValueString">Reťazec predvolenej hodnoty stĺpca tak, ako je uložený v databáze.</param>
            <returns>Upravený reťazec.</returns>
        </member>
        <member name="T:Kros.Data.Schema.TableSchema">
            <summary>
            Schéma databázovej tabuľky.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.TableSchema.#ctor(System.String)">
            <summary>
            Vytvorí schému tabuľky <paramref name="name"/>.
            </summary>
            <param name="name">Meno tabuľky. Je povinné.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="name"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota <paramref name="name"/> je prázdny reťazec, alebo reťazec bielych znakov.
            </exception>
        </member>
        <member name="M:Kros.Data.Schema.TableSchema.#ctor(Kros.Data.Schema.DatabaseSchema,System.String)">
            <summary>
            Vytvorí schému tabuľky <paramref name="name"/> pre databázu <paramref name="database"/>.
            </summary>
            <param name="database">Databáza, v ktorej je tabuľka. Hodnota nie je povinná, môže byť <c>null</c>.</param>
            <param name="name">Meno tabuľky. Je povinné.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="name"/> je <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Hodnota <paramref name="name"/> je prázdny reťazec, alebo reťazec bielych znakov.
            </exception>
        </member>
        <member name="P:Kros.Data.Schema.TableSchema.Name">
            <summary>
            Meno tabuľky.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.TableSchema.Database">
            <summary>
            Databáza, ktorej tabuľka patrí.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.TableSchema.Columns">
            <summary>
            Zoznam stĺpcov tabuľky.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.TableSchema.PrimaryKey">
            <summary>
            Primárny kľúč tabuľky.
            </summary>
            <remarks>Inštancia je vždy vytvorená, aj ak tabuľka nemá primárny kľúč. V tomto prípade len nemá žiadny stĺpec.
            </remarks>
        </member>
        <member name="P:Kros.Data.Schema.TableSchema.Indexes">
            <summary>
            Zoznam indexov tabuľky.
            </summary>
        </member>
        <member name="P:Kros.Data.Schema.TableSchema.ForeignKeys">
            <summary>
            Zoznam cudzích kľúčov tabuľky.
            </summary>
        </member>
        <member name="T:Kros.Data.Schema.TableSchemaCollection">
            <summary>
            Zoznam tabuliek databázy.
            </summary>
            <remarks>Tabuľkám pridaným do zoznamu je automaticky nastavená databáza <see cref="P:Kros.Data.Schema.TableSchema.Database"/>.
            Do zoznamu nie je možné pridať tabuľku, ktorá už patrí inej databáze. V takom prípade je vyvolaná výnimka
            <see cref="T:System.InvalidOperationException"/>.</remarks>
        </member>
        <member name="M:Kros.Data.Schema.TableSchemaCollection.#ctor(Kros.Data.Schema.DatabaseSchema)">
            <summary>
            Vytvorí zoznam tabuliek pre databázu <paramref name="database"/>.
            </summary>
            <param name="database">Databáza.</param>
            <exception cref="T:System.ArgumentNullException">Hodnota <paramref name="database"/> je <c>null</c>.</exception>
        </member>
        <member name="P:Kros.Data.Schema.TableSchemaCollection.Database">
            <summary>
            Databáza, ktorej zoznam tabuliek patrí.
            </summary>
        </member>
        <member name="M:Kros.Data.Schema.TableSchemaCollection.Add(System.String)">
            <summary>
            Vytvorí schému tabuľky s menom <paramref name="name"/> a pridá ju do zoznamu.
            </summary>
            <param name="name">Meno novej tabuľky.</param>
            <returns>Vytvorená schéma tabuľky.</returns>
        </member>
        <member name="T:Kros.Data.SqlServer.SqlServerErrorCode">
            <summary>
            Chybové kódy Microsoft Sql Server-a.
            </summary>
            <remarks>Chybový kód je vo výnimke <see cref="T:System.Data.SqlClient.SqlException">SqlException</see>
            vo vlastnosti <see cref="P:System.Data.SqlClient.SqlException.Number">Number</see>. Zoznam chybových kódov
            je na adrese <see href="https://msdn.microsoft.com/en-us/library/cc645603.aspx"/>.</remarks>
        </member>
        <member name="F:Kros.Data.SqlServer.SqlServerErrorCode.Unknown">
            <summary>
            Neznámy typ chyby.
            </summary>
        </member>
        <member name="F:Kros.Data.SqlServer.SqlServerErrorCode.ServerNotAccessible">
            <summary>
            A network-related or instance-specific error occurred while establishing a connection to SQL Server.
            The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server
            is configured to allow remote connections.
            (provider: Named Pipes Provider, error: 40 - Could not open a connection to SQL Server)
            </summary>
        </member>
        <member name="F:Kros.Data.SqlServer.SqlServerErrorCode.InvalidColumnName">
            <summary>
            Invalid column name 'name'.
            </summary>
        </member>
        <member name="F:Kros.Data.SqlServer.SqlServerErrorCode.InvalidObjectName">
            <summary>
            Invalid object name 'name'.
            </summary>
        </member>
        <member name="F:Kros.Data.SqlServer.SqlServerErrorCode.DatabaseAlreadyExists">
            <summary>
            Database 'name' already exists. Choose a different database name.
            </summary>
        </member>
        <member name="F:Kros.Data.SqlServer.SqlServerErrorCode.CannotInsertDuplicateKeyRow">
            <summary>
            Cannot insert duplicate key row in object 'objectName' with unique index 'indexName'.
            </summary>
        </member>
        <member name="F:Kros.Data.SqlServer.SqlServerErrorCode.DuplicateKeyViolation">
            <summary>
            Violation of ... constraint 'constraintName'. Cannot insert duplicate key in object 'objectName'.
            </summary>
        </member>
        <member name="F:Kros.Data.SqlServer.SqlServerErrorCode.TheDatabaseCouldNotBeExclusivelyLocked">
            <summary>
            The database could not be exclusively locked to perform the operation.
            </summary>
        </member>
        <member name="F:Kros.Data.SqlServer.SqlServerErrorCode.ConstraintViolation">
            <summary>
            The ... statement conflicted with the ... constraint. The conflict occurred in database ..., table ....
            </summary>
        </member>
        <member name="T:Kros.Data.SqlServer.SqlServerIdGenerator">
            <summary>
            Generátor unikátnych identifikátorov pre sql server.
            </summary>
            <seealso cref="T:Kros.Data.IdGeneratorFactories" />
            <seealso cref="T:Kros.Data.SqlServer.SqlServerIdGeneratorFactory" />
            <remarks>Štandardne sa nevytvára priamo ale cez <see cref="T:Kros.Data.SqlServer.SqlServerIdGeneratorFactory"/>.</remarks>
            <example>
            <code language="cs" source="..\Examples\Kros.Utils\IdGeneratorExamples.cs" region="IdGeneratorFactory"/>
            </example>
        </member>
        <member name="M:Kros.Data.SqlServer.SqlServerIdGenerator.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Konštruktor.
            </summary>
            <param name="connectionString">
            Connection string, ktorý sa použije na vytvorenie conenction pre získavanie unikátnych identifikátorov.
            </param>
            <param name="tableName">Názov tabuľky, pre ktorú generujem identifikátory.</param>
            <param name="batchSize">Veľkosť dávky, ktorú si zarezervuje dopredu.</param>
        </member>
        <member name="M:Kros.Data.SqlServer.SqlServerIdGenerator.#ctor(System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
            <summary>
            Konštruktor.
            </summary>
            <param name="connection">Connection, ktorá sa použije pre získavanie unikátnych identifikátorov.</param>
            <param name="tableName">Názov tabuľky, pre ktorú generujem identifikátory.</param>
            <param name="batchSize">Veľkosť dávky, ktorú si zarezervuje dopredu.</param>
        </member>
        <member name="M:Kros.Data.SqlServer.SqlServerIdGenerator.GetNewIdFromDbCore">
            <inheritdoc/>
        </member>
        <member name="M:Kros.Data.SqlServer.SqlServerIdGenerator.CreateConnection(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Kros.Data.SqlServer.SqlServerIdGenerator.GetStoredProcedureCreationScript">
            <summary>
            Získanie scriptu na vytvorenie store procedure.
            </summary>
        </member>
        <member name="M:Kros.Data.SqlServer.SqlServerIdGenerator.GetIdStoreTableCreationScript">
            <summary>
            Získanie scriptu na vytvorenie IdStore tabuľky.
            </summary>
        </member>
        <member name="M:Kros.Data.SqlServer.SqlServerIdGenerator.InitDatabaseForIdGenerator">
            <inheritdoc/>
        </member>
        <member name="T:Kros.Data.SqlServer.SqlServerIdGeneratorFactory">
            <summary>
            Interface popisujúci factory triedu, ktorá vie vytvoriť inštanciu <see cref="T:Kros.Data.SqlServer.SqlServerIdGenerator"/>.
            </summary>
            <seealso cref="T:Kros.Data.SqlServer.SqlServerIdGenerator"/>
            <seealso cref="T:Kros.Data.IdGeneratorFactories"/>
            <example>
            <code language="cs" source="..\Examples\Kros.Utils\IdGeneratorExamples.cs" region="IdGeneratorFactory"/>
            </example>
            <remarks>Štandardne sa nevytvára priamo ale cez <see cref="T:Kros.Data.IdGeneratorFactories"/>.</remarks>
        </member>
        <member name="F:Kros.Data.SqlServer.SqlServerIdGeneratorFactory.DefaultIdStoreTableName">
            <summary>
            Defaultný názov tabuľky, kde si uchovávame identifikátory pre jednotlivé tabuľky.
            </summary>
        </member>
        <member name="M:Kros.Data.SqlServer.SqlServerIdGeneratorFactory.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Kros.Data.SqlServer.SqlServerIdGeneratorFactory"/> class.
            </summary>
            <param name="connection">Connection, ktorá sa použije pre získavanie unikátnych identifikátorov.</param>
        </member>
        <member name="M:Kros.Data.SqlServer.SqlServerIdGeneratorFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kros.Data.SqlServer.SqlServerIdGeneratorFactory"/> class.
            </summary>
            <param name="connectionString">Connection string, ktorý sa použije na vytvorenie conenction pre získavanie unikátnych identifikátorov.</param>
        </member>
        <member name="M:Kros.Data.SqlServer.SqlServerIdGeneratorFactory.GetGenerator(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Kros.Data.SqlServer.SqlServerIdGeneratorFactory.GetGenerator(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Kros.Data.SqlServer.SqlServerIdGeneratorFactory.Register">
            <summary>
            Registrovanie factory metód na vytvorenie inštancie do <see cref="T:Kros.Data.IdGeneratorFactories"/>.
            </summary>
        </member>
        <member name="T:Kros.Extensions.DateTimeExtensions">
            <summary>
            Rozšírenia pre dátum a čas <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Kros.Extensions.DateTimeExtensions.FirstDayOfMonth(System.DateTime)">
            <summary>
            Vráti dátum, ktorý predstavuje prvý deň v mesiaci a roku vstupného dátumu <paramref name="value" />.
            Časová zložka je vynulovaná.
            </summary>
            <param name="value">Dátum, ku ktorému je vrátený prvý deň v mesiaci.</param>
            <returns>Dátum.</returns>
        </member>
        <member name="M:Kros.Extensions.DateTimeExtensions.FirstDayOfCurrentMonth">
            <summary>
            Vráti dátum, ktorý predstavuje prvý deň v aktuálnom mesiaci.
            </summary>
            <returns>Dátum.</returns>
        </member>
        <member name="M:Kros.Extensions.DateTimeExtensions.LastDayOfMonth(System.DateTime)">
            <summary>
            Vráti dátum, ktorý predstavuje posledný deň v mesiaci a roku vstupného dátumu <paramref name="value" />.
            Časová zložka je vynulovaná.
            </summary>
            <param name="value">Dátum, ku ktorému je vrátený posledný deň v mesiaci.</param>
            <returns>Dátum.</returns>
        </member>
        <member name="M:Kros.Extensions.DateTimeExtensions.LastDayOfCurrentMonth">
            <summary>
            Vráti dátum, ktorý predstavuje posledný deň v aktuálnom mesiaci.
            </summary>
            <returns>Dátum.</returns>
        </member>
        <member name="T:Kros.Extensions.StringExtensions">
            <summary>
            Všeobecné rozšírenia pre reťazec (<see cref="T:System.String">String</see>).
            </summary>
        </member>
        <member name="M:Kros.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Vráti, či zadaný reťazec <paramref name="value"/> je <c>null</c>, alebo prázdny reťazec <c>string.Empty</c>.
            </summary>
            <param name="value">Testovaný reťazec.</param>
            <returns><see langword="true"/>, ak testovaný reťazec je <c>null</c>, alebo <c>string.Empty</c>.</returns>
        </member>
        <member name="M:Kros.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Vráti, či zadaný reťazec <paramref name="value"/> je <c>null</c>, alebo prázdny reťazec <c>string.Empty</c>,
            alebo pozostáva iba z bielych znakov.
            </summary>
            <param name="value">Testovaný reťazec.</param>
            <returns><see langword="true"/>, ak testovaný reťazec je <c>null</c>, alebo <c>string.Empty</c>, alebo pozostáva
            iba z bielych znakov.</returns>
        </member>
        <member name="M:Kros.Extensions.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Odstráni diakritiku z reťazca.
            </summary>
        </member>
        <member name="M:Kros.Extensions.StringExtensions.RemoveNewLines(System.String)">
            <summary>
            Removes new lines from string. Removed are <c>line feed</c> (<c>\n</c>) and <c>carriage return</c> (<c>\r</c>)
            characters.
            </summary>
            <param name="value">Value.</param>
            <returns>String without new lines.</returns>
        </member>
        <member name="M:Kros.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Vráti prvých <paramref name="length"/> znakov zo vstupného reťazca <paramref name="value"/>.
            </summary>
            <param name="value">Vstupný reťazec.</param>
            <param name="length">Dĺžka reťazca.</param>
            <returns>Reťazec.</returns>
        </member>
        <member name="M:Kros.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Vráti posledných <paramref name="length"/> znakov zo vstupného reťazca <paramref name="value"/>.
            </summary>
            <param name="value">Vstupný reťazec.</param>
            <param name="length">Dĺžka reťazca.</param>
            <returns>Reťazec.</returns>
        </member>
        <member name="T:Kros.IO.PathFormatter">
            <summary>
            Trieda na formátovanie ciest k súborom. Stará sa o to, aby celková cesta nepresiahla maximálnu
            povolenú dĺžku a aj o to, aby bola vygenerovaná cesta k súboru, ktorý ešte neexistuje.
            </summary>
            <remarks>
            <para>
            Použitie triedy je vhodné napríklad pri exportoch, ak sa pri exporte generuje viacero súborov. Používateľ programu
            zadá len výstupný adresár a názvy súborov sa generujú na základe exportovaných dát. Trieda zabezpečí, aby vygenerované
            názvy boli platné, tzn. aby neobsahovali nepovolené znaky a aj aby náhodou nebola vygenerovaná príliš dlhá cesta
            k súboru. Zároveň kontroluje existenciu súboru. Ak už existuje spbor, ktorý vygenerovala, je k vygenerovanej ceste
            pridané číslo.
            </para>
            <para>K vytvoreným cestám je možné pridať ešte vlastný informačný reťazec.</para>
            <para>Pre jednoduché priame použitie je vytvorená statická inštancia
            <see cref="P:Kros.IO.PathFormatter.Default">Default</see>.</para>
            </remarks>
        </member>
        <member name="P:Kros.IO.PathFormatter.Default">
            <summary>
            Inštancia pre jednoduchšie priame použitie.
            </summary>
        </member>
        <member name="M:Kros.IO.PathFormatter.FormatDateForPath(System.DateTime)">
            <summary>
            Naformátuje dátum do podoby, ako bude použitý v názve súboru/zložky.
            </summary>
            <param name="value">Formátovaný dátum.</param>
            <remarks>Minimálna (<see cref="F:System.DateTime.MinValue"/>) a maximálna (<see cref="F:System.DateTime.MaxValue"/>) hodnota dátumu
            sa neformátuje a je vrátený prázdny reťazec.</remarks>
        </member>
        <member name="M:Kros.IO.PathFormatter.FormatSeasonForPath(System.DateTime,System.DateTime)">
            <summary>
            Naformátuje obdobie <paramref name="from"/> - <paramref name="to"/> do podoby, ako bude použité
            v názve súboru/zložky.
            </summary>
            <param name="from">Začiatok obdobia.</param>
            <param name="to">Koniec obdobia.</param>
            <remarks>Ak hodnota niektorého parametra je minimálny alebo maximálny dátum, parameter sa nepoužije.
            Na samotné formátovanie dátumu sa použije metóda <see cref="M:Kros.IO.PathFormatter.FormatDateForPath(System.DateTime)"/>.</remarks>
        </member>
        <member name="M:Kros.IO.PathFormatter.FormatPath(System.String,System.String)">
            <summary>
            Spojí zadanú zložku <paramref name="folder"/> a názov súboru <paramref name="fileName"/> do cieľovej cesty.
            Nekontroluje, či taký súbor existuje.
            </summary>
            <param name="folder">Zložka.</param>
            <param name="fileName">Názov súboru.</param>
            <remarks>Ak je výsledná cesta príliš dlhá, názov súboru je skrátený tak, aby bola platná.</remarks>
        </member>
        <member name="M:Kros.IO.PathFormatter.FormatNewPath(System.String,System.String)">
            <summary>
            Spojí zadanú zložku <paramref name="folder"/> a názov súboru <paramref name="fileName"/>
            do cieľovej cesty. Vrátená je cesta k takému súboru, ktorý ešte na disku neexistuje.
            </summary>
            <param name="folder">Zložka.</param>
            <param name="fileName">Názov súboru.</param>
            <remarks>V prípade existencie súboru je k názvu pridané také číslo (<b>(1)...</b>),
            aby zadaný súbor neexistoval. Ak je výsledná cesta príliš dlhá, názov súboru je skrátený aby cesta bola platná.
            Skráti sa pôvodný názov súboru, v prípade, že bolo k názvu dodané číslo, toto je zachované.</remarks>
        </member>
        <member name="M:Kros.IO.PathFormatter.FormatPath(System.String,System.String,System.String)">
            <summary>
            Spojí zadanú zložku <paramref name="folder"/> a názov súboru <paramref name="fileName"/> do cieľovej cesty,
            pričom k názvu súboru pridá zadanú informáciu <paramref name="info"/>. Nekontroluje, či taký súbor existuje.
            </summary>
            <param name="folder">Zložka.</param>
            <param name="fileName">Názov súboru.</param>
            <param name="info">Informácia, ktorá je pridaná k názvu súboru.</param>
            <remarks>Informácia <paramref name="info"/> je pridaná k názvu súboru do zátvoriek.
            Teda ak <paramref name="fileName"/> je <c>exported.xml</c> a <paramref name="info"/> je <c>Lorem Ipsum</c>,
            výsledný názov súboru bude <c>exported (Lorem Ipsum).xml</c>. Ak je výsledná cesta príliš dlhá, názov súboru
            je skrátený tak, aby bola platná. Pričom je skrátený pôvodný názov súboru, teda dodatočná informácia
            <paramref name="info"/> ostane zachovaná.</remarks>
        </member>
        <member name="M:Kros.IO.PathFormatter.FormatNewPath(System.String,System.String,System.String)">
            <summary>
            Spojí zadanú zložku <paramref name="folder"/> a názov súboru <paramref name="fileName"/> do cieľovej cesty,
            pričom k názvu súboru pridá zadanú informáciu <paramref name="info"/>. Vrátená je cesta k takému súboru,
            ktorý ešte na disku neexistuje.
            </summary>
            <param name="folder">Zložka.</param>
            <param name="fileName">Názov súboru.</param>
            <param name="info">Informácia, ktorá je pridaná k názvu súboru.</param>
            <remarks>Informácia <paramref name="info"/> je pridaná k názvu súboru do zátvoriek.
            Teda ak <paramref name="fileName"/> je <c>exported.xml</c> a <paramref name="info"/> je <c>Lorem Ipsum</c>,
            výsledný názov súboru bude <c>exported (Lorem Ipsum).xml</c>. V prípade existencie súboru je k názvu pridané
            také číslo (<b>(1)...</b>), aby zadaný súbor neexistoval. Ak je výsledná cesta príliš dlhá, názov súboru
            je skrátený tak, aby bola platná. Pričom je skrátený pôvodný názov súboru, teda dodatočná informácia
            <paramref name="info"/> a prípadné pridané číslo ostanú zachované.</remarks>
        </member>
        <member name="M:Kros.IO.PathFormatter.FormatPaths``1(System.String,System.String,System.Collections.Generic.Dictionary{``0,System.String})">
            <summary>
            Vráti zoznam ciest k súborom. Cesty sú vytvorené na základe zadanej zložky <paramref name="baseFolder"/>,
            základného mena súboru <paramref name="baseFileName"/> a informácií pre jednotlivé súbory
            <paramref name="fileInfos"/>.
            </summary>
            <typeparam name="TKey">Typ kľúča vo vstupnom slovníku <paramref name="fileInfos"/>. Rovnaké kľúče sú
            vo vrátenom zozname ciest k súborom.</typeparam>
            <param name="baseFolder">Základná zložka pre cesty k súborom.</param>
            <param name="baseFileName">Základný názov súboru.</param>
            <param name="fileInfos">Informácie, podľa ktorých sa vytvárajú cesty jednotlivým výstupným súborom.</param>
            <returns>Slovník s rovnakými kľúčmi ako sú v <paramref name="fileInfos"/>, kde pre každý kľúč je vytvorená
            cesta k výstupnému súboru.</returns>
            <remarks>
            <para>Vo výstupnom slovníku je vytvorená cesta pre každú hodnodu z vstupného <paramref name="fileInfos"/>,
            pričom kľúče sú rovnaké.</para>
            <para>Zložka v ktorej budú súbory má základ <paramref name="baseFolder"/>.</para>
            <para>Názvy súborov sú vytvorené spôsobom ako to robí metóda <see cref="M:Kros.IO.PathFormatter.FormatPath(System.String,System.String)">FormatPath</see>
            s parametrom <c>info</c>, teda k základnému názvu <paramref name="baseFileName"/> je pridaná informácia
            zo zoznamu <paramref name="fileInfos"/>.</para>
            <para>Výsledná cesty sú skrátené tak, aby nepresiahli maximálnu dĺžky cesty pre súborový systém.
            Ak je nejaká cesta príliš dlhá, sú všetky skrátené rovnakým spôsobom tak, aby najdlahšia z nich bola platná.
            Skrátený je základný názov súboru o príslušný počet znakov. Preto v tomto prípade je skrátený aj názov
            podzložky aj základný názov pre súbory v nej. Dodatočné informácie pre jednotlivé súbory
            <paramref name="fileInfos"/> nie sú orezávané.</para>
            </remarks>
            <example>
            <para>Ak napríklad <paramref name="baseFolder"/> je <c>C:\lorem\ipsum</c>, <paramref name="baseFileName"/>
            je <c>filename.xml</c> a hodnoty v <paramref name="fileInfos"/> sú:</para>
            <list type="table">
            <listheader><term>kľúč</term><description>informácia k súboru</description></listheader>
            <item><term>1</term><description>some info 1</description></item>
            <item><term>2</term><description>some info 2</description></item>
            <item><term>3</term><description>some info 3</description></item>
            </list>
            <para>Výsledný zoznam vytvorených ciest bude:</para>
            <list type="table">
            <listheader><term>kľúč</term><description>cesta</description></listheader>
            <item><term>1</term><description>C:\lorem\ipsum\filename (some info 1).xml</description></item>
            <item><term>2</term><description>C:\lorem\ipsum\filename (some info 2).xml</description></item>
            <item><term>3</term><description>C:\lorem\ipsum\filename (some info 3).xml</description></item>
            </list>
            </example>
        </member>
        <member name="M:Kros.IO.PathFormatter.FormatPathsInSubfolder``1(System.String,System.String,System.Collections.Generic.Dictionary{``0,System.String})">
            <summary>
            Vráti zoznam ciest k súborom. Cesty sú vytvorené na základe zadanej zložky <paramref name="baseFolder"/>,
            základného mena súboru <paramref name="baseFileName"/> a informácií pre jednotlivé súbory
            <paramref name="fileInfos"/>.
            </summary>
            <typeparam name="TKey">Typ kľúča vo vstupnom slovníku <paramref name="fileInfos"/>. Rovnaké kľúče sú
            vo vrátenom zozname ciest k súborom.</typeparam>
            <param name="baseFolder">Základná zložka pre cesty k súborom. K nej sa pridá pod zložka s rovnakým názovm,
            ako je základné meno súboru <paramref name="baseFileName"/>.</param>
            <param name="baseFileName">Základný názov súboru. Podľa neho sa vytvorí vo výslednej ceste podzložka
            a zároveň je to základ pre názvy výstupných súborov.</param>
            <param name="fileInfos">Informácie, podľa ktorých sa vytvárajú cesty jednotlivým výstupným súborom.</param>
            <returns>Slovník s rovnakými kľúčmi ako sú v <paramref name="fileInfos"/>, kde pre každý kľúč je vytvorená
            cesta k výstupnému súboru.</returns>
            <remarks>
            <para>Vo výstupnom slovníku je vytvorená cesta pre každú hodnodu z vstupného <paramref name="fileInfos"/>,
            pričom kľúče sú rovnaké.</para>
            <para>Zložka v ktorej budú súbory má základ <paramref name="baseFolder"/>, ku ktorému je pridaná podzložka
            vytvorená z názvu súboru <paramref name="baseFileName"/>. Vždy sa vytvorí taká cesta, ktorá ešte neexistuje
            na disku. Ak zadaná zložka už existuje, je k nej ešte pridané číslo (<b>(1)</b>...).</para>
            <para>Názvy súborov sú vytvorené spôsobom ako to robí metóda <see cref="M:Kros.IO.PathFormatter.FormatPath(System.String,System.String)">FormatPath</see>
            s parametrom <c>info</c>, teda k základnému názvu <paramref name="baseFileName"/> je pridaná informácia
            zo zoznamu <paramref name="fileInfos"/>.</para>
            <para>Výsledná cesty sú skrátené tak, aby nepresiahli maximálnu dĺžky cesty pre súborový systém.
            Ak je nejaká cesta príliš dlhá, sú všetky skrátené rovnakým spôsobom tak, aby najdlahšia z nich bola platná.
            Skrátený je základný názov súboru o príslušný počet znakov. Preto v tomto prípade je skrátený aj názov
            podzložky aj základný názov pre súbory v nej. Dodatočné informácie pre jednotlivé súbory
            <paramref name="fileInfos"/> nie sú orezávané.</para>
            </remarks>
            <example>
            <para>Ak napríklad <paramref name="baseFolder"/> je <c>C:\lorem\ipsum</c>, <paramref name="baseFileName"/>
            je <c>filename.xml</c> a hodnoty v <paramref name="fileInfos"/> sú:</para>
            <list type="table">
            <listheader><term>kľúč</term><description>informácia k súboru</description></listheader>
            <item><term>1</term><description>some info 1</description></item>
            <item><term>2</term><description>some info 2</description></item>
            <item><term>3</term><description>some info 3</description></item>
            </list>
            <para>Výsledný zoznam vytvorených ciest bude:</para>
            <list type="table">
            <listheader><term>kľúč</term><description>cesta</description></listheader>
            <item><term>1</term><description>C:\lorem\ipsum\filename\filename (some info 1).xml</description></item>
            <item><term>2</term><description>C:\lorem\ipsum\filename\filename (some info 2).xml</description></item>
            <item><term>3</term><description>C:\lorem\ipsum\filename\filename (some info 3).xml</description></item>
            </list>
            </example>
        </member>
        <member name="M:Kros.IO.PathFormatter.FormatPathsInSubfolder``1(System.String,System.String,System.String,System.Collections.Generic.Dictionary{``0,System.String})">
            <summary>
            Vráti zoznam ciest k súborom. Cesty sú vytvorené na základe zadanej zložky <paramref name="baseFolder"/>,
            základného mena súboru <paramref name="baseFileName"/> a informácií pre jednotlivé súbory
            <paramref name="fileInfos"/>.
            </summary>
            <typeparam name="TKey">Typ kľúča vo vstupnom slovníku <paramref name="fileInfos"/>. Rovnaké kľúče sú
            vo vrátenom zozname ciest k súborom.</typeparam>
            <param name="baseFolder">Základná zložka pre cesty k súborom. K nej sa pridá pod zložka s rovnakým názovm,
            ako je základné meno súboru <paramref name="baseFileName"/>.</param>
            <param name="baseFileName">Základný názov súboru. Podľa neho sa vytvorí vo výslednej ceste podzložka
            a zároveň je to základ pre názvy výstupných súborov.</param>
            <param name="subfolderInfo">Informácia, pridaná k názvu podzložky,</param>
            <param name="fileInfos">Informácie, podľa ktorých sa vytvárajú cesty jednotlivým výstupným súborom.</param>
            <returns>Slovník s rovnakými kľúčmi ako sú v <paramref name="fileInfos"/>, kde pre každý kľúč je vytvorená
            cesta k výstupnému súboru.</returns>
            <remarks>
            <para>Vo výstupnom slovníku je vytvorená cesta pre každú hodnodu z vstupného <paramref name="fileInfos"/>,
            pričom kľúče sú rovnaké.</para>
            <para>Zložka v ktorej budú súbory má základ <paramref name="baseFolder"/>, ku ktorému je pridaná podzložka
            vytvorená z názvu súboru <paramref name="baseFileName"/> ku ktorému je pridaná informácia
            <paramref name="subfolderInfo"/>. Vždy sa vytvorí taká cesta, ktorá ešte neexistuje
            na disku. Ak zadaná zložka už existuje, je k nej ešte pridané číslo (<b>(1)</b>...).</para>
            <para>Názvy súborov sú vytvorené spôsobom ako to robí metóda <see cref="M:Kros.IO.PathFormatter.FormatPath(System.String,System.String)">FormatPath</see>
            s parametrom <c>info</c>, teda k základnému názvu <paramref name="baseFileName"/> je pridaná informácia
            zo zoznamu <paramref name="fileInfos"/>.</para>
            <para>Výsledná cesty sú skrátené tak, aby nepresiahli maximálnu dĺžky cesty pre súborový systém.
            Ak je nejaká cesta príliš dlhá, sú všetky skrátené rovnakým spôsobom tak, aby najdlahšia z nich bola platná.
            Skrátený je základný názov súboru o príslušný počet znakov. Preto v tomto prípade je skrátený aj názov
            podzložky aj základný názov pre súbory v nej. Dodatočné informácie pre zložku <paramref name="subfolderInfo"/>
            a pre jednotlivé súbory <paramref name="fileInfos"/> nie sú orezávané.</para>
            </remarks>
            <example>
            <para>Ak napríklad <paramref name="baseFolder"/> je <c>C:\lorem\ipsum</c>, <paramref name="baseFileName"/>
            je <c>filename.xml</c> a hodnoty v <paramref name="fileInfos"/> sú:</para>
            <list type="table">
            <listheader><term>kľúč</term><description>informácia k súboru</description></listheader>
            <item><term>1</term><description>some info 1</description></item>
            <item><term>2</term><description>some info 2</description></item>
            <item><term>3</term><description>some info 3</description></item>
            </list>
            <para>Výsledný zoznam vytvorených ciest bude:</para>
            <list type="table">
            <listheader><term>kľúč</term><description>cesta</description></listheader>
            <item><term>1</term><description>C:\lorem\ipsum\filename\filename (some info 1).xml</description></item>
            <item><term>2</term><description>C:\lorem\ipsum\filename\filename (some info 2).xml</description></item>
            <item><term>3</term><description>C:\lorem\ipsum\filename\filename (some info 3).xml</description></item>
            </list>
            </example>
        </member>
        <member name="P:Kros.IO.PathFormatter.InfoOpeningString">
            <summary>
            Otvárací reťazec pre dodatočnú informáciu, ktorý sa vloží do názvu súboru/zložky pred túto informáciu.
            Dodatočná informácia je uzavretá medzi <see cref="P:Kros.IO.PathFormatter.InfoOpeningString"/> a <see cref="P:Kros.IO.PathFormatter.InfoClosingString"/>.
            Štandardne je to ľavá okrúhla zátvorka: <b>(</b>.
            </summary>
            <remarks>Pri nastavení hodnoty sú v nej nahradené znaky, ktoré nie sú platné pre názov súboru/zložky
            (<see cref="M:Kros.IO.PathHelper.ReplaceInvalidPathChars(System.String)"/>).</remarks>
        </member>
        <member name="P:Kros.IO.PathFormatter.InfoClosingString">
            <summary>
            Uzatvárací reťazec pre dodatočnú informáciu, ktorý sa vloží do názvu súboru/zložky za túto informáciu.
            Dodatočná informácia je uzavretá medzi <see cref="P:Kros.IO.PathFormatter.InfoOpeningString"/> a <see cref="P:Kros.IO.PathFormatter.InfoClosingString"/>.
            Štandardne je to pravá okrúhla zátvorka: <b>)</b>.
            </summary>
            <remarks>Pri nastavení hodnoty sú v nej nahradené znaky, ktoré nie sú platné pre názov súboru/zložky
            (<see cref="M:Kros.IO.PathHelper.ReplaceInvalidPathChars(System.String)"/>).</remarks>
        </member>
        <member name="P:Kros.IO.PathFormatter.CounterOpeningString">
            <summary>
            Otvárací reťazec pre počítadlo, ktorý sa vloží do názvu súboru/zložky pred toto počítadlo.
            Počítadlo je uzavreté medzi <see cref="P:Kros.IO.PathFormatter.CounterOpeningString"/> a <see cref="P:Kros.IO.PathFormatter.CounterClosingString"/>.
            Štandardne je to ľavá okrúhla zátvorka: <b>(</b>.
            </summary>
            <remarks>Pri nastavení hodnoty sú v nej nahradené znaky, ktoré nie sú platné pre názov súboru/zložky
            (<see cref="M:Kros.IO.PathHelper.ReplaceInvalidPathChars(System.String)"/>).</remarks>
        </member>
        <member name="P:Kros.IO.PathFormatter.CounterClosingString">
            <summary>
            Uzatvárací reťazec pre počítadlo, ktorý sa vloží do názvu súboru/zložky za toto počítadlo.
            Počítadlo je uzavreté medzi <see cref="P:Kros.IO.PathFormatter.CounterOpeningString"/> a <see cref="P:Kros.IO.PathFormatter.CounterClosingString"/>.
            Štandardne je to pravá okrúhla zátvorka: <b>)</b>.
            </summary>
            <remarks>Pri nastavení hodnoty sú v nej nahradené znaky, ktoré nie sú platné pre názov súboru/zložky
            (<see cref="M:Kros.IO.PathHelper.ReplaceInvalidPathChars(System.String)"/>).</remarks>
        </member>
        <member name="P:Kros.IO.PathFormatter.MaxPathLength">
            <summary>
            Maximálna dĺžka cesty. Je určená na interné použitie.
            </summary>
        </member>
        <member name="M:Kros.IO.PathFormatter.FileExists(System.String)">
            <summary>
            Vráti, či existuje zadaný súbor. Metóda je určená na interné použitie.
            </summary>
            <param name="filePath">Cesta k súboru.</param>
            <returns><see langword="true"/>, ak súbor existuje, <see langword="false"/> ak neexistuje.</returns>
        </member>
        <member name="M:Kros.IO.PathFormatter.FolderExists(System.String)">
            <summary>
            Vráti, či existuje zadaná zložka. Metóda je určená na interné použitie.
            </summary>
            <param name="folderPath">Cesta k zložke.</param>
            <returns><see langword="true"/>, ak zložka existuje, <see langword="false"/> ak neexistuje.</returns>
        </member>
        <member name="T:Kros.IO.PathHelper">
            <summary>
            Pomocná trieda na prácu s cestami k súborom/zložkám.
            </summary>
        </member>
        <member name="M:Kros.IO.PathHelper.BuildPath(System.String[])">
            <summary>
            Spojí zadané časti <paramref name="parts" /> do reťazca predstavujúceho cestu k súboru/zložke.
            </summary>
            <param name="parts">Časti cesty.</param>
            <returns>Vytvorená cesta.</returns>
            <exception cref="T:System.ArgumentNullException">
            Vstupný parameter <paramref name="parts" /> má hodnotu <see langword="null"/>,
            alebo niektorá z jeho častí je <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Niektorý z reťazcov v zozname <paramref name="parts" />
            obsahuje nepovolené znaky, definované v <see cref="M:System.IO.Path.GetInvalidPathChars">Path.GetInvalidPathChars</see>.
            </exception>
            <remarks>
            <para>
            Metóda pracuje podobne ako štandardná .NET metóda
            <see cref="M:System.IO.Path.Combine(System.String[])" autoUpgrade="true">Path.Combine</see>, s pár upravenými detailami.
            <list type="bullet">
            <item>Ak niektorá časť začína lomítkom (normálnym, alebo spätným), správa sa k nej rovnako ako keby tak nebolo.
            <see cref="M:System.IO.Path.Combine(System.String[])" autoUpgrade="true">Path.Combine</see> výslednú cestu začne vytvárať od poslednej
            časti začínajúcej lomítkom (ak taká je v zozname <paramref name="parts"/>), teda všetky časti predtým ignoruje.
            <example>
            <c>Path.Combine("lorem", "\ipsum", "dolor")</c> vráti <c>\ipsum\dolor</c><br />
            <c>PathHelper.BuildPath("lorem", "\ipsum", "dolor")</c> vráti <c>lorem\ipsum\dolor</c>
            </example>
            </item>
            <item>Ak časť končí oddeľovačom disku (dvojbodka), oddeľovač adresárov (lomítko) je vložený aj za ňou.
            <example>
            <c>Path.Combine("c:", "lorem", "ipsum", "dolor")</c> vráti <b>c:lorem\ipsum\dolor</b><br />
            <c>PathHelper.Build("c:", "lorem", "ipsum", "dolor")</c> vráti <b>c:\lorem\ipsum\dolor</b>
            </example>
            Niektoré funkcie .NET nedokážu s cestou v tvare <c>c:lorem</c> pracovať a vyvolávajú výnimky.
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Kros.IO.PathHelper.ReplaceInvalidPathChars(System.String)">
            <summary>
            V reťazci <paramref name="pathName" /> nahradí zakázané znaky pre názov súboru za pomlčku (<b>-</b>).
            Ak je vo vstupnom reťazci viacero zakázaných znakov za sebou, sú všetky ako skupina nahradené jednou pomlčkou.
            </summary>
            <param name="pathName">Vstupný reťazec, predstavujúci názov súboru.</param>
            <returns><inheritdoc cref="M:Kros.IO.PathHelper.ReplaceInvalidPathChars(System.String,System.String)"/></returns>
        </member>
        <member name="M:Kros.IO.PathHelper.ReplaceInvalidPathChars(System.String,System.String)">
            <summary>
            V reťazci <paramref name="pathName" /> nahradí zakázané znaky pre názov súboru za reťazec
            <paramref name="replacement" />. Ak je vo vstupnom reťazci viacero zakázaných znakov za sebou,
            sú všetky ako skupina nahradené jedným znakom.
            </summary>
            <param name="pathName">Vstupný reťazec, predstavujúci názov súboru.</param>
            <param name="replacement">Reťazec, ktorým sa nahrádzajú zakázané znaky. Ak je <see langword="null"/>,
            použije sa prázdny reťazec, tzn. zakázané znaky sa zo vstupného reťazca odstránia.</param>
            <returns>Reťazec s nahradenými zakázanými znakmi. Ak vstupná hodnota <paramref name="pathName"/>
            je <see langword="null"/>, je vrátený prázdny reťazec (<c>string.Empty</c>).</returns>
        </member>
        <member name="M:Kros.IO.PathHelper.GetTempPath">
            <summary>
            Adresárová cesta ku systémovej zložke pre dočasné súbory <legacyBold>bez</legacyBold> lomítka na konci.
            </summary>
        </member>
        <member name="M:Kros.IO.PathHelper.IsNetworkPath(System.String)">
            <summary>
            Zistí, či dané umiestnenie, adresár alebo súbor sídli na zdieľanom adresári na sieti.
            </summary>
            <param name="path">Cesta, ktorá sa testuje.</param>
            <returns><see langword="true"/>, ak <paramref name="path"/> je sieťová cesta, inak <see langword="false"/>.</returns>
        </member>
        <member name="T:Kros.Net.IWebClient">
            <summary>
            Interface popisujúci WebClient-a. Aby sme v testoch mohli podvrhovať vlastné implementácie.
            </summary>
        </member>
        <member name="M:Kros.Net.IWebClient.OpenRead(System.String)">
            <summary>
            Opens a readable stream for the data downloaded from a resource with the URI.
            </summary>
            <param name="address">The URI from which to download data.</param>
            <returns>A System.IO.Stream used to read data from a resource.</returns>
        </member>
        <member name="T:Kros.Net.NetworkChecker">
             <summary>
             Trieda určená na testovanie dostupnosti internetového spojenia.
             </summary>
             <remarks>
             Nestačí testovať pomocou <see cref="M:System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable"/>,
             pretože táto metóda zistí či je počítač v sieti. Nezistí či je reálne dostupný internet.
             Taktiež netestujeme pomocou pingovania, pretože niektorí správcovia zakazujú ping.
            
             Takže testujeme pomocou dotazu na konkrétnu službu.
             </remarks>
        </member>
        <member name="M:Kros.Net.NetworkChecker.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kros.Net.NetworkChecker"/> class.
            </summary>
            <param name="testingAddress">Webová adresa služby, ktorú testujeme.</param>
        </member>
        <member name="M:Kros.Net.NetworkChecker.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kros.Net.NetworkChecker"/> class.
            </summary>
            <param name="serviceAddress">Webová adresa služby, ktorú testujeme.</param>
            <param name="requestTimeout">
            Maximálna doba čakania na odpoveď zo server. Keď uplynie a odpoveď sme nedostali, tak považujeme,
            že internet/služba nie je dostupný.
            V milisekundách.
            </param>
            <param name="responseCacheExpiration">
            čas v milisekundách, ktorý udáva ako dlho sa bude používať zapamätaná informácia o tom, že ide internet.
            </param>
        </member>
        <member name="P:Kros.Net.NetworkChecker.ServiceAddress">
            <summary>
            Webová adresa služby, ktorú testujeme.
            </summary>
        </member>
        <member name="P:Kros.Net.NetworkChecker.RequestTimeout">
            <summary>
            Maximálna doba čakania na odpoveď zo server. Keď uplynie a odpoveď sme nedostali, tak považujeme,
            že internet/služba nie je dostupný. Hodnota je v milisekundách.</summary>
        </member>
        <member name="P:Kros.Net.NetworkChecker.ResponseCacheExpiration">
            <summary>
            Hodnota, ktorá udáva ako dlho sa bude používať zapamätaná informácia o tom, že internet je dostupný. V milisekundách.
            </summary>
        </member>
        <member name="M:Kros.Net.NetworkChecker.IsNetworkAvailable">
            <summary>
            Skontroluje či je internet (konkrétna služba <see cref="P:Kros.Net.NetworkChecker.ServiceAddress"/>) k dispozícií.
            Kladnú odpoveď kešuje a reálny test prevedie len pokiaľ uplynul čas platnosti keše
            <see cref="P:Kros.Net.NetworkChecker.ResponseCacheExpiration"/>.
            </summary>
            <returns>
            <see langword="true"/>, ak je (respektíve v danom časovom intervale bol dostupný internet).
            <see langword="false"/> ak internet nie je dostupný.
            </returns>
        </member>
        <member name="T:Kros.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_Equal">
            <summary>
              Looks up a localized string similar to Hodnota parametra musí byť {0}, ale skutočná hodnota je {1}..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_GreaterOrEqualThan">
            <summary>
              Looks up a localized string similar to Hodnota parametra musí byť väčšia alebo rovná {0}, ale skutočná hodnota je {1}..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_GreaterThan">
            <summary>
              Looks up a localized string similar to Hodnota parametra musí byť väčšia ako {0}, ale skutočná hodnota je {1}..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_IsInListDefaultMessage">
            <summary>
              Looks up a localized string similar to Hodnota &quot;{0}&quot; musí byť zo zoznamu hodnôt &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_IsNotInListDefaultMessage">
            <summary>
              Looks up a localized string similar to Hodnota &quot;{0}&quot; nesmie byť zo zoznamu hodnôt &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_IsNotOfType">
            <summary>
              Looks up a localized string similar to Parameter nemôže byť typu {0}..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_IsOfType">
            <summary>
              Looks up a localized string similar to Parameter nie je požadovaného typu. Požadovaný typ: {0}. Typ parametra: {1}..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_LessOrEqualThan">
            <summary>
              Looks up a localized string similar to Hodnota parametra musí byť menšia alebo rovná {0}, ale skutočná hodnota je {1}..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_LessThan">
            <summary>
              Looks up a localized string similar to Hodnota parametra musí byť menšia ako {0}, ale skutočná hodnota je {1}..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_NotEmptyGuid">
            <summary>
              Looks up a localized string similar to Prázdny GUID nie je povolený..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_NotEqual">
            <summary>
              Looks up a localized string similar to Hodnota parametrov nesmie byť rovnaká {0}..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_NotNull">
            <summary>
              Looks up a localized string similar to Hodnota nemôže byť null..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_StringNotNullOrEmpty">
            <summary>
              Looks up a localized string similar to Reťazec nemôže byť null, alebo prázdny..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Check_StringNotNullOrWhiteSpace">
            <summary>
              Looks up a localized string similar to Reťazec nemôže byť null, prázdny, ani zložený iba z bielych znakov..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.DatabaseSchemaCache_UnsupportedDatabaseType">
            <summary>
              Looks up a localized string similar to Nepodporovaný typ pripojenia na databázu: {0}.
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.DatabaseSchemaLoader_UnsupportedConnectionType">
            <summary>
              Looks up a localized string similar to Nepodporovaný typ spojenia na databázu..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.IndexSchema_CannotChangeIndexNameWhenBelongsToTable">
            <summary>
              Looks up a localized string similar to Nie je možné zmeniť názov indexu, ak je v zozname indexov tabuľky. Tento index patrí tabuľke &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Schema_ColumnBelongsToAnotherIndex">
            <summary>
              Looks up a localized string similar to Stĺpec &quot;{0}&quot; nie je možné pridať indexu &quot;{1}&quot;, pretože už patrí indexu &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Schema_ColumnBelongsToAnotherTable">
            <summary>
              Looks up a localized string similar to Stĺpec &quot;{0}&quot; nie je možné pridať tabuľke &quot;{1}&quot;, pretože už patrí tabuľke &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Schema_ForeignKeyBelongsToAnotherTable">
            <summary>
              Looks up a localized string similar to Cudzí kľúč &quot;{0}&quot; nie je možné pridať tabuľke &quot;{1}&quot;, pretože už patrí tabuľke &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Schema_IndexBelongsToAnotherTable">
            <summary>
              Looks up a localized string similar to Index &quot;{0}&quot; nie je možné pridať tabuľke &quot;{1}&quot;, pretože už patrí tabuľke &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.Schema_TableBelongsToAnotherDatabase">
            <summary>
              Looks up a localized string similar to Tabuľku &quot;{0}&quot; nie je možné pridať databáze &quot;{1}&quot;, pretože už patrí databáze &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.SchemaCacheKeyGenerator_UnsupportedConnectionType">
            <summary>
              Looks up a localized string similar to Nepodporovaný typ pripojenia na databázu. Podporované pripojenia na databázy sú: {0}.
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.SqlServerSchemaLoader_NoInitialCatalog">
            <summary>
              Looks up a localized string similar to Pre načítanie schémy je nutné, aby spojenie na databázu malo špecifikovanú konkrétnu databázu (Initial Catalog)..
            </summary>
        </member>
        <member name="P:Kros.Properties.Resources.SqlServerSchemaLoader_UnsupportedConnectionType">
            <summary>
              Looks up a localized string similar to Nepodporovaný typ spojenia na databázu. Spojenie musí byť typu SqlConnection..
            </summary>
        </member>
        <member name="T:Kros.UnitTests.SqlServerDatabaseTestBase">
            <summary>
            Základná trieda pre databázové integračné testy nad SQL Server-om. Trieda sa stará o vytvorenie a inicializáciu
            databázy, v ktorej bežia testy. V potomkoch sa už len používa spojenie na vytvorenú databázu.
            </summary>
            <remarks>
            <para>
            Trieda vytvorí databázu pre testy vo svojom konštruktore a pri volaní <see cref="M:Kros.UnitTests.SqlServerDatabaseTestBase.Dispose"/> je táto databáza
            zmazaná. Databázu je možné aj inicializovať nastavením <see cref="P:Kros.UnitTests.SqlServerDatabaseTestBase.DatabaseInitScripts"/>, aby bolo pre testy
            pripravené všetko potrebné.
            </para>
            <para>
            V potomkoch je potrebné prepísať metódy <see cref="P:Kros.UnitTests.SqlServerDatabaseTestBase.BaseConnectionString"/> a nastaviť tak spojenie na server,
            kde sa databáza vytvorí. V jednej testovacej triede je možné mať ľubovoľné množstvo testov.
            <c>xUnit</c> pre každý test vytvára novú inštanciu triedy, takže každý test bude mať svoju vlastnú inicializovanú
            databázu.
            </para>
            <code language="cs" source="..\Examples\Kros.Utils\SqlServerDatabaseTestBaseExamples.cs" region="SqlServerDatabaseTestBase"/>
            </remarks>
        </member>
        <member name="M:Kros.UnitTests.SqlServerDatabaseTestBase.#ctor">
            <summary>
            Vytvorí inštanciu triedy a inicializuje <see cref="P:Kros.UnitTests.SqlServerDatabaseTestBase.ServerHelper"/>.
            </summary>
        </member>
        <member name="P:Kros.UnitTests.SqlServerDatabaseTestBase.BaseDatabaseName">
            <summary>
            Základný názov databázy, ktorá sa vytvorí. K tomuto názvu je ešte pridaný náhodný GUID, aby bolo meno
            databázy unikátne. Štandardne vráti plný názov aktuálnej triedy (<c>GetType().FullName</c>) s pridaným
            podčiarovníkom na konci (napr. <c>Kros.Utils.UnitTests.SomeTestClass_</c>).
            </summary>
            <remarks>
            Pozri tiež <see cref="P:Kros.UnitTests.SqlServerTestHelper.BaseDatabaseName"/>,
            resp. celú triedu <see cref="T:Kros.UnitTests.SqlServerTestHelper"/>.
            </remarks>
        </member>
        <member name="P:Kros.UnitTests.SqlServerDatabaseTestBase.BaseConnectionString">
            <summary>
            Základný connection string na server, kde sa vytvorí databáza. Connection string neobsahuje meno konkrétnej
            databázy, pretože to je generované, aby každý test išiel izolovane vo vlastnej databáze.
            </summary>
            <remarks>
            Pozri tiež <see cref="P:Kros.UnitTests.SqlServerTestHelper.BaseConnectionString"/>,
            resp. celú triedu <see cref="T:Kros.UnitTests.SqlServerTestHelper"/>.
            </remarks>
        </member>
        <member name="P:Kros.UnitTests.SqlServerDatabaseTestBase.DatabaseInitScripts">
            <summary>
            Skripty pre inicializáciu databázy do počiatočného stavu pre testy.
            </summary>
            <remarks>
            Trieda automaticky vytvorí prázdnu databázu. Ak je potrebné mať databázu nejako konkrétne inicializovanú
            (vytvorné tabuľky, pripravené dáta...), v tejto vlatnosti je zoznam skriptov, ktoré sa po vytvorení databázy
            spustia.
            </remarks>
        </member>
        <member name="P:Kros.UnitTests.SqlServerDatabaseTestBase.ServerHelper">
            <summary>
            Helper pre testy na sql serveri. Obsahuje hlavne spojenie na databázu, v ktorej testy bežia
            (<c>ServerHelper.Connection</c>).
            </summary>
        </member>
        <member name="M:Kros.UnitTests.SqlServerDatabaseTestBase.CheckDisposed">
            <summary>
            Kontroluje, či inštancia nebola uvoľnená. Ak už bola (bola zavolaná jej metóda <see cref="M:Kros.UnitTests.SqlServerDatabaseTestBase.Dispose"/>),
            vyvolá výnimku <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Vyvolaná pri použití triedy, ak už bola na nej zavolaná
            metóda <see cref="M:Kros.UnitTests.SqlServerDatabaseTestBase.Dispose"/>.</exception>
        </member>
        <member name="T:Kros.UnitTests.SqlServerTestHelper">
            <summary>
            Pomocná trieda na testovanie databázových vecí v reálnej SQL Server databáze.
            </summary>
            <remarks>
            Štandardne sú testy robené tak, aby nebežali nad reálnou databázou, ale iba nad nejakým rozhraním, ktoré sa ako
            databáza tvári. Pre niektoré testy je však potrebné reálne otestovať funkčnosť voči skutočnej databáze.
            Trieda sa stará o to, že vytvorí novú databázu s náhodným menom a vráti spojenie na ňu, ktoré je možné používať
            (<see cref="P:Kros.UnitTests.SqlServerTestHelper.Connection"/>).
            </remarks>
            <example>
            <code language = "cs" source="..\Examples\Kros.Utils\SqlServerTestHelperExamples.cs" region="SqlServerTestHelper" />
            </example>
        </member>
        <member name="M:Kros.UnitTests.SqlServerTestHelper.#ctor(System.String,System.String)">
            <summary>
            Vytvorí inštanciu so zadanými parametrami. Vytvorená databáza bude prázdna.
            </summary>
            <param name="baseConnectionString">Základný connection string na SQL Server, kde sa vytvorí databáza.</param>
            <param name="baseDatabaseName">Základné meno databázy, ku ktorému sa pridá náhodný GUID. Nemusí byť zadané.</param>
        </member>
        <member name="M:Kros.UnitTests.SqlServerTestHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            Vytvorí inštanciu so zadanými parametrami a vytvorenú databázu inicializuje skriptom
            <paramref name="initDatabaseScript"/>.
            </summary>
            <param name="baseConnectionString">Základný connection string na SQL Server, kde sa vytvorí databáza.</param>
            <param name="baseDatabaseName">Základné meno databázy, ku ktorému sa pridá náhodný GUID. Nemusí byť zadané.</param>
            <param name="initDatabaseScript">Skript, ktorý sa spustí a inicializuje tak novovytvorenú databázu.
            Môže to byť napríklad skript na vytvorenie a naplnenie potrebných tabuliek.</param>
        </member>
        <member name="M:Kros.UnitTests.SqlServerTestHelper.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Vytvorí inštanciu so zadanými parametrami a vytvorenú databázu inicializuje skriptami
            <paramref name="initDatabaseScripts"/>.
            </summary>
            <param name="baseConnectionString">Základný connection string na SQL Server, kde sa vytvorí databáza.</param>
            <param name="baseDatabaseName">Základné meno databázy, ku ktorému sa pridá náhodný GUID. Nemusí byť zadané.</param>
            <param name="initDatabaseScripts">Zoznam skriptov, ktoré sa spustia a inicializujú tak novovytvorenú databázu.
            Môžu to byť napríklad skripty na vytvorenie a naplnenie potrebných tabuliek.</param>
        </member>
        <member name="P:Kros.UnitTests.SqlServerTestHelper.BaseConnectionString">
            <summary>
            Základný connection string na SQL Server, kde bude vytvorená dočasná databáza. Connection string nemusí mať zdané
            meno databázy, pretože to bude aj tak vygenerované vlastné.
            </summary>
        </member>
        <member name="P:Kros.UnitTests.SqlServerTestHelper.BaseDatabaseName">
            <summary>
            Základný názov databázy. K tomuto názvu sa pridá náhdoný GUID, aby bola databáza jednoznačná.
            Ak tento názov nebol zadaný, meno databázy bude iba náhodný GUID.
            </summary>
        </member>
        <member name="P:Kros.UnitTests.SqlServerTestHelper.Connection">
            <summary>
            Spojenie na vytvorenú databázu.
            </summary>
        </member>
        <member name="M:Kros.UnitTests.SqlServerTestHelper.GenerateDatabaseName">
            <summary>
            Vygeneruje názov databázy, ktorá sa na serveri vytvorí. Názov je zložený z <see cref="P:Kros.UnitTests.SqlServerTestHelper.BaseDatabaseName"/>
            a pridaný je k nemu GUID.
            </summary>
            <returns>Názov databázy.</returns>
        </member>
        <member name="M:Kros.UnitTests.SqlServerTestHelper.InitDatabase">
            <summary>
            Inicializuje databázu. Metóda je volaná po vytvorení databázy a štandardne spustí skript(y), ktoré
            boli zadané v konštruktore. Metóda sa volá iba raz, po vytvorení databázy.
            </summary>
        </member>
        <member name="T:Kros.Utils.Check">
            <summary>
            Pomocná trieda na kontrolu argumentov metód. Každá kontrola, ak zlyhá, vyvolá nejaký druh výnimky
            <c>ArgumentException</c> (<see cref="T:System.ArgumentException"/>, <see cref="T:System.ArgumentNullException"/>,
            <see cref="T:System.ArgumentOutOfRangeException"/>).
            </summary>
            <remarks>
            Štandardný spôsob kontroly argumentov je:
            <code language="cs" source="..\Examples\Kros.Utils\CheckExamples.cs" region="CheckArgumentsOld"/>
            S triedou <c>Check</c> je to jednoduché. Ak je to možné, jednotlivé kontroly vracajú vstupnú hodnotu,
            takže je možné na jednom riadku argument skontrolovať, aj priradiť:
            <code language = "cs" source="..\Examples\Kros.Utils\CheckExamples.cs" region="CheckArgumentsNew"/>
            </remarks>
        </member>
        <member name="M:Kros.Utils.Check.NotNull``1(``0,System.String)">
            <summary>
            Parameter <paramref name="param"/> nesmie byť <c>null</c>. Vyvolaná výnimka má nastavené meno
            parametra.
            </summary>
            <typeparam name="T">Typ vstupného parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="paramName">Meno parametra.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Hodnota parametra <paramref name="param"/> je <c>null</c>.
            </exception>
        </member>
        <member name="M:Kros.Utils.Check.NotNull``1(``0,System.String,System.String)">
            <summary>
            Parameter <paramref name="param"/> nesmie byť <c>null</c>. Vyvolaná výnimka má nastavený text
            a meno parametra.
            </summary>
            <typeparam name="T">Typ vstupného parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Hodnota parametra <paramref name="param"/> je <c>null</c>.
            </exception>
        </member>
        <member name="M:Kros.Utils.Check.IsOfType``1(System.Object,System.String)">
            <summary>
            Parameter <paramref name="param"/> musí byť zadaného typu <typeparamref name="T"/>. Vyvolaná výnimka má nastavené
            meno parametra.
            </summary>
            <typeparam name="T">Typ, ktorého musí parameter byť.</typeparam>
            <param name="param">Parameter.</param>
            <param name="paramName">Meno parametra.</param>
            <exception cref="T:System.ArgumentException">Parameter nie je požadovaného typu.</exception>
        </member>
        <member name="M:Kros.Utils.Check.IsOfType``1(System.Object,System.String,System.String)">
            <summary>
            Parameter <paramref name="param"/> musí byť zadaného typu <typeparamref name="T"/>. Vyvolaná výnimka má nastavený text
            a meno parametra.
            </summary>
            <typeparam name="T">Typ, ktorého musí parameter byť.</typeparam>
            <param name="param">Parameter.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <exception cref="T:System.ArgumentException">Parameter nie je požadovaného typu.</exception>
        </member>
        <member name="M:Kros.Utils.Check.IsOfType(System.Object,System.Type,System.String)">
            <summary>
            Parameter <paramref name="param"/> musí byť zadaného typu <paramref name="expectedType"/>. Vyvolaná výnimka má
            nastavené meno parametra.
            </summary>
            <param name="param">Parameter.</param>
            <param name="expectedType">Typ, ktorého musí parameter byť.</param>
            <param name="paramName">Meno parametra.</param>
            <exception cref="T:System.ArgumentException">Parameter nie je požadovaného typu.</exception>
        </member>
        <member name="M:Kros.Utils.Check.IsOfType(System.Object,System.Type,System.String,System.String)">
            <summary>
            Parameter <paramref name="param"/> musí byť zadaného typu <paramref name="expectedType"/>. Vyvolaná výnimka má
            nastavený text a meno parametra.
            </summary>
            <param name="param">Parameter.</param>
            <param name="expectedType">Typ, ktorého musí parameter byť.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <exception cref="T:System.ArgumentException">Parameter nie je požadovaného typu.</exception>
        </member>
        <member name="M:Kros.Utils.Check.IsNotOfType``1(System.Object,System.String)">
            <summary>
            Parameter <paramref name="param"/> nesmie byť zadaného typu <typeparamref name="T"/>. Vyvolaná výnimka má
            nastavené meno parametra.
            </summary>
            <typeparam name="T">Parameter nesmie byť tohto typu.</typeparam>
            <param name="param">Parameter.</param>
            <param name="paramName">Meno parametra.</param>
            <exception cref="T:System.ArgumentException">Parameter je zadaného typu.</exception>
        </member>
        <member name="M:Kros.Utils.Check.IsNotOfType``1(System.Object,System.String,System.String)">
            <summary>
            Parameter <paramref name="param"/> nesmie byť zadaného typu <typeparamref name="T"/>. Vyvolaná výnimka má
            nastavený text a meno parametra.
            </summary>
            <typeparam name="T">Parameter nesmie byť tohto typu.</typeparam>
            <param name="param">Parameter.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <exception cref="T:System.ArgumentException">Parameter je zadaného typu.</exception>
        </member>
        <member name="M:Kros.Utils.Check.IsNotOfType(System.Object,System.Type,System.String)">
            <summary>
            Parameter <paramref name="param"/> nesmie byť zadaného typu <paramref name="notExpectedType"/>. Vyvolaná výnimka má
            nastavené meno parametra.
            </summary>
            <param name="param">Parameter.</param>
            <param name="notExpectedType">Parameter nesmie byť tohto typu.</param>
            <param name="paramName">Meno parametra.</param>
            <exception cref="T:System.ArgumentException">Parameter je zadaného typu.</exception>
        </member>
        <member name="M:Kros.Utils.Check.IsNotOfType(System.Object,System.Type,System.String,System.String)">
            <summary>
            Parameter <paramref name="param"/> nesmie byť zadaného typu <paramref name="notExpectedType"/>. Vyvolaná výnimka má
            nastavený text a meno parametra.
            </summary>
            <param name="param">Parameter.</param>
            <param name="notExpectedType">Parameter nesmie byť tohto typu.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <exception cref="T:System.ArgumentException">Parameter je zadaného typu.</exception>
        </member>
        <member name="M:Kros.Utils.Check.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Parameter <paramref name="param"/> nesmie byť <c>null</c>, ani prázdny reťazec.
            Vyvolaná výnimka má nastavené meno parametra.
            </summary>
            <param name="param">Parameter.</param>
            <param name="paramName">Meno parametra.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter má hodnotu <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Parameter je prázdny reťazec.</exception>
        </member>
        <member name="M:Kros.Utils.Check.NotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Parameter <paramref name="param"/> nesmie byť <c>null</c>, ani prázdny reťazec.
            Vyvolaná výnimka má nastavený text a meno parametra.
            </summary>
            <param name="param">Parameter.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter má hodnotu <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Parameter je prázdny reťazec.</exception>
        </member>
        <member name="M:Kros.Utils.Check.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Parameter <paramref name="param"/> nesmie byť <c>null</c>, ani prázdny reťazec, ani reťazec
            zložený iba z bielych znakov. Vyvolaná výnimka má nastavené meno parametra.
            </summary>
            <param name="param">Parameter.</param>
            <param name="paramName">Meno parametra.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter má hodnotu <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Parameter je prázdny reťazec, alebo reťazec zložený iba z bielych znakov.
            </exception>
        </member>
        <member name="M:Kros.Utils.Check.NotNullOrWhiteSpace(System.String,System.String,System.String)">
            <summary>
            Parameter <paramref name="param"/> nesmie byť <c>null</c>, ani prázdny reťazec, ani reťazec
            zložený iba z bielych znakov. Vyvolaná výnimka má nastavený text a meno parametra.
            </summary>
            <param name="param">Parameter.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter má hodnotu <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Parameter je prázdny reťazec, alebo reťazec zložený iba z bielych znakov.
            </exception>
        </member>
        <member name="M:Kros.Utils.Check.Equal``1(``0,``0,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> musí byť <paramref name="value"/>.
            Vyvolaná výnimka má nastavené meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="value">Požadovaná hodnota parametera.</param>
            <param name="paramName">Meno parametra.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Parameter nemá požadovanú hodnotu.</exception>
        </member>
        <member name="M:Kros.Utils.Check.Equal``1(``0,``0,System.String,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> musí byť <paramref name="value"/>.
            Vyvolaná výnimka má nastavený text a meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="value">Požadovaná hodnota parametera.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Parameter nemá požadovanú hodnotu.</exception>
        </member>
        <member name="M:Kros.Utils.Check.NotEqual``1(``0,``0,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> nesmie byť <paramref name="value"/>.
            Vyvolaná výnimka má nastavené meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="value">Rozdielna hodnota parametera.</param>
            <param name="paramName">Meno parametra.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Parameter má rovnakú hodnotu.</exception>
        </member>
        <member name="M:Kros.Utils.Check.NotEqual``1(``0,``0,System.String,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> nesmie byť <paramref name="value"/>.
            Vyvolaná výnimka má nastavený text a meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="value">Rozdielna hodnota parametera.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Parameter má rovnakú hodnotu.</exception>
        </member>
        <member name="M:Kros.Utils.Check.LessThan``1(``0,``0,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> musí byť menšia ako <paramref name="value"/>.
            Vyvolaná výnimka má nastavené meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="value">Hodnota, s ktorou sa parameter porovnáva.</param>
            <param name="paramName">Meno parametra.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Hodnota parametra je väčšia, alebo rovná zadanej hodnote.</exception>
        </member>
        <member name="M:Kros.Utils.Check.LessThan``1(``0,``0,System.String,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> musí byť menšia ako <paramref name="value"/>.
            Vyvolaná výnimka má nastavený text a meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="value">Hodnota, s ktorou sa parameter porovnáva.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Hodnota parametra je väčšia, alebo rovná zadanej hodnote.</exception>
        </member>
        <member name="M:Kros.Utils.Check.LessOrEqualThan``1(``0,``0,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> musí byť menšia, alebo rovná <paramref name="value"/>.
            Vyvolaná výnimka má nastavené meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="value">Hodnota, s ktorou sa parameter porovnáva.</param>
            <param name="paramName">Meno parametra.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Hodnota parametra je väčšia zadanej hodnote.</exception>
        </member>
        <member name="M:Kros.Utils.Check.LessOrEqualThan``1(``0,``0,System.String,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> musí byť menšia, alebo rovná <paramref name="value"/>.
            Vyvolaná výnimka má nastavený text a meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="value">Hodnota, s ktorou sa parameter porovnáva.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Hodnota parametra je väčšia zadanej hodnote.</exception>
        </member>
        <member name="M:Kros.Utils.Check.GreaterThan``1(``0,``0,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> musí byť väčšia ako <paramref name="value"/>.
            Vyvolaná výnimka má nastavené meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="value">Hodnota, s ktorou sa parameter porovnáva.</param>
            <param name="paramName">Meno parametra.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Hodnota parametra je menšia, alebo rovná zadanej hodnote.</exception>
        </member>
        <member name="M:Kros.Utils.Check.GreaterThan``1(``0,``0,System.String,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> musí byť väčšia ako <paramref name="value"/>.
            Vyvolaná výnimka má nastavený text a meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="value">Hodnota, s ktorou sa parameter porovnáva.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Hodnota parametra je menšia, alebo rovná zadanej hodnote.</exception>
        </member>
        <member name="M:Kros.Utils.Check.GreaterOrEqualThan``1(``0,``0,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> musí byť väčšia, alebo rovná <paramref name="value"/>.
            Vyvolaná výnimka má nastavené meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="value">Hodnota, s ktorou sa parameter porovnáva.</param>
            <param name="paramName">Meno parametra.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Hodnota parametra je menšia zadanej hodnote.</exception>
        </member>
        <member name="M:Kros.Utils.Check.GreaterOrEqualThan``1(``0,``0,System.String,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> musí byť väčšia, alebo rovná <paramref name="value"/>.
            Vyvolaná výnimka má nastavený text a meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Parameter.</param>
            <param name="value">Hodnota, s ktorou sa parameter porovnáva.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Hodnota parametra je menšia zadanej hodnote.</exception>
        </member>
        <member name="M:Kros.Utils.Check.IsInList``1(``0,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> musí byť v zozname <paramref name="list"/>.
            Vyvolaná výnimka má nastavené meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Hodnota, ktorá musí byť v zozname <paramref name="list"/>.</param>
            <param name="list">Zoznam hodnôt, medzi ktorými sa musí nachádzať hodnota <paramref name="param"/>.</param>
            <param name="paramName">Meno parametra.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Hodnota parametra nie je v zadanom zozname.</exception>
        </member>
        <member name="M:Kros.Utils.Check.IsInList``1(``0,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> musí byť v zozname <paramref name="list"/>.
            Vyvolaná výnimka má nastavený text a meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Hodnota, ktorá musí byť v zozname <paramref name="list"/>.</param>
            <param name="list">Zoznam hodnôt, medzi ktorými sa musí nachádzať hodnota <paramref name="param"/>.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Hodnota parametra nie je v zadanom zozname.</exception>
        </member>
        <member name="M:Kros.Utils.Check.IsNotInList``1(``0,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> nesmie byť v zozname <paramref name="list"/>.
            Vyvolaná výnimka má nastavené meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Hodnota, ktorá nesmie byť v zozname <paramref name="list"/>.</param>
            <param name="list">Zoznam hodnôt, medzi ktorými sa hodnota <paramref name="param"/> nesmie nachádzať.</param>
            <param name="paramName">Meno parametra.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Hodnota parametra je v zadanom zozname.</exception>
        </member>
        <member name="M:Kros.Utils.Check.IsNotInList``1(``0,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Hodnota parametra <paramref name="param"/> nesmie byť v zozname <paramref name="list"/>.
            Vyvolaná výnimka má nastavený text a meno parametra.
            </summary>
            <typeparam name="T">Typ parametra.</typeparam>
            <param name="param">Hodnota, ktorá nesmie byť v zozname <paramref name="list"/>.</param>
            <param name="list">Zoznam hodnôt, medzi ktorými sa hodnota <paramref name="param"/> nesmie nachádzať.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Hodnota parametra je v zadanom zozname.</exception>
        </member>
        <member name="M:Kros.Utils.Check.NotEmptyGuid(System.Guid,System.String)">
            <summary>
            Parameter <paramref name="param"/> nesmie byť prázdny GUID (<see cref="F:System.Guid.Empty"/>). Vyvolaná výnimka má nastavené
            meno parametra.
            </summary>
            <param name="param">Parameter.</param>
            <param name="paramName">Meno parametra.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Paramere je prázdny GUID (<see cref="F:System.Guid.Empty"/>).</exception>
        </member>
        <member name="M:Kros.Utils.Check.NotEmptyGuid(System.Guid,System.String,System.String)">
            <summary>
            Parameter <paramref name="param"/> nesmie byť prázdny GUID (<see cref="F:System.Guid.Empty"/>). Vyvolaná výnimka má nastavený
            text a meno parametra.
            </summary>
            <param name="param">Parameter.</param>
            <param name="paramName">Meno parametra.</param>
            <param name="message">Text výnimky.</param>
            <returns>Vstupný parameter <paramref name="param"/>.</returns>
            <exception cref="T:System.ArgumentException">Paramere je prázdny GUID (<see cref="F:System.Guid.Empty"/>).</exception>
        </member>
        <member name="T:Kros.Utils.DateTimeProvider">
            <summary>
            Trieda sprístupňujúca dátum a čas, aby bolo možné "fixovať" čas v testoch
            - <see cref="M:Kros.Utils.DateTimeProvider.InjectActualDateTime(System.DateTime)"/>.
            </summary>
            <remarks>
            <para>
            Aktuálny čas je dostupný vlastnosťou <see cref="P:Kros.Utils.DateTimeProvider.Now"/>, vlastný čas je možné podhodiť volaním
            <see cref="M:Kros.Utils.DateTimeProvider.InjectActualDateTime(System.DateTime)"/>:
            <code language="cs" source="..\Examples\Kros.Utils\DateTimeProviderExamples.cs" region="BasicExample"/>
            </para>
            <para>
            Natavená hodnota je platná pre aktuálne vlákno, tzn. v dvoch rôznych vláknach je možné mať rôzne nastavené
            hodnoty (<see cref="T:System.ThreadStaticAttribute"/>).
            </para>
            </remarks>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Kros.Utils.DateTimeProvider.Now">
            <summary>
            Ak bol čas fixne nastavený metódou <see cref="M:Kros.Utils.DateTimeProvider.InjectActualDateTime(System.DateTime)"/>, je vrátený ten. Inak je vrátený
            reálny čas <see cref="P:System.DateTime.Now">DateTime.Now</see>.
            </summary>
        </member>
        <member name="M:Kros.Utils.DateTimeProvider.InjectActualDateTime(System.DateTime)">
            <summary>
            Nastaví fixný čas, ktorý provider potom vracia vo vlastnosti <see cref="P:Kros.Utils.DateTimeProvider.Now"/>. Používa sa v <c>using</c> bloku.
            </summary>
            <param name="actualDateTime">Hodnota, ktorú bude provider vracať.</param>
        </member>
        <member name="T:Kros.Utils.IDiContainer">
            <summary>
            Interface for DI (Dependency Injection) container.
            </summary>
        </member>
        <member name="M:Kros.Utils.IDiContainer.Register``1">
            <summary>
            Registers a class type.
            </summary>
            <typeparam name="T">Class type.</typeparam>
            <returns>Container instance for fluent registration.</returns>
        </member>
        <member name="M:Kros.Utils.IDiContainer.Register``1(System.String)">
            <summary>
            Registers a class type with name <paramref name="name"/>.
            </summary>
            <typeparam name="T">Class type.</typeparam>
            <param name="name">Name of the registered class type.</param>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1" select="returns"/>
        </member>
        <member name="M:Kros.Utils.IDiContainer.Register``1(System.Func{Kros.Utils.IDiContainer,``0})">
            <summary>
            Register interface or class type using lambda function.
            </summary>
            <typeparam name="T">Interface or class type.</typeparam>
            <param name="lambda">
            Function which takes current DI container as parameter and creates a new instance of <typeparamref name="T"/>.
            </param>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1" select="returns"/>
        </member>
        <member name="M:Kros.Utils.IDiContainer.Register``1(System.String,System.Func{Kros.Utils.IDiContainer,``0})">
            Parameter has no matching param tag in the XML comment (but other parameters do)
            <summary>
            Register named interface or class type using lambda function.
            </summary>
            <typeparam name="T">Interface or class type.</typeparam>
            <param name="name">Name of the registered interface or class type.</param>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1(System.Func{Kros.Utils.IDiContainer,``0})" select="param"/>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1" select="returns"/>
        </member>
        <member name="M:Kros.Utils.IDiContainer.Register``2">
            <summary>
            Registers a interface-class pair.
            </summary>
            <typeparam name="TFrom">Registered interface.</typeparam>
            <typeparam name="TTo">Registered class type that implements <typeparamref name="TFrom"/>.</typeparam>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1" select="returns"/>
        </member>
        <member name="M:Kros.Utils.IDiContainer.Register``2(System.String)">
            <summary>
            Registers a named interface-class pair.
            </summary>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``2" select="typeparam"/>
            <param name="name">Name of the registered interface.</param>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1" select="returns"/>
        </member>
        <member name="M:Kros.Utils.IDiContainer.RegisterInstance``1">
            <summary>
            Registers class type as singleton.
            </summary>
            <typeparam name="T">Registered class type.</typeparam>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1" select="returns"/>
        </member>
        <member name="M:Kros.Utils.IDiContainer.RegisterInstance``1(System.String)">
            <summary>
            Registers class type with name <paramref name="name"/> as singleton.
            </summary>
            <typeparam name="T">Registered class type.</typeparam>
            <param name="name">Name of the registered class type.</param>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1" select="returns"/>
        </member>
        <member name="M:Kros.Utils.IDiContainer.RegisterInstance``1(``0)">
            <summary>
            Registers class instance.
            </summary>
            <typeparam name="T">Registered class type.</typeparam>
            <param name="instance">Registered instance.</param>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1" select="returns"/>
        </member>
        <member name="M:Kros.Utils.IDiContainer.RegisterInstance``1(System.String,``0)">
            <summary>
            Registers class instance.
            </summary>
            <typeparam name="T">Registered class type.</typeparam>
            <param name="name">Name of the registered class type.</param>
            <param name="instance">Registered instance.</param>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1" select="returns"/>
        </member>
        <member name="M:Kros.Utils.IDiContainer.RegisterInstance``2">
            <summary>
            Registers a interface-class pair as singleton.
            </summary>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``2" select="typeparam"/>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1" select="returns"/>
        </member>
        <member name="M:Kros.Utils.IDiContainer.RegisterInstance``2(System.String)">
            <summary>
            Registers a named interface to class type pair. class type <typeparamref name="TTo"/> as a singleton.
            </summary>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``2" select="typeparam"/>
            <param name="name">Name of the registered class type.</param>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1" select="returns"/>
        </member>
        <member name="M:Kros.Utils.IDiContainer.RegisterInstance``1(System.Func{Kros.Utils.IDiContainer,``0})">
            <summary>
            Registers class instance as sigleton using function.
            </summary>
            <typeparam name="T">Registered class type.</typeparam>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1(System.Func{Kros.Utils.IDiContainer,``0})" select="param"/>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1" select="returns"/>
        </member>
        <member name="M:Kros.Utils.IDiContainer.RegisterInstance``1(System.String,System.Func{Kros.Utils.IDiContainer,``0})">
            Parameter has no matching param tag in the XML comment (but other parameters do)
            <summary>
            Registers named class instance as sigleton using function.
            </summary>
            <typeparam name="T">Registered class type.</typeparam>
            <param name="name">Name, under which is type registered.</param>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1(System.Func{Kros.Utils.IDiContainer,``0})" select="param"/>
            <inheritdoc cref="M:Kros.Utils.IDiContainer.Register``1" select="returns"/>
        </member>
        <member name="M:Kros.Utils.IDiContainer.GetInstance``1">
            <summary>
            Resolves the instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to resolve from container.</typeparam>
            <returns>Object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Kros.Utils.IDiContainer.GetInstance``1(System.String)">
            <summary>
            Resolves the named instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to resolve from container.</typeparam>
            <param name="name">Name of the desired instance.</param>
            <returns>Object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Kros.Utils.IDiContainer.GetInstance(System.Type)">
            <summary>
            Resolves the instance of type <paramref name="instanceType"/>.
            </summary>
            <param name="instanceType">Type to resolve from container.</param>
            <returns>Object of type <paramref name="instanceType"/>.</returns>
        </member>
        <member name="M:Kros.Utils.IDiContainer.GetInstance(System.Type,System.String)">
            <summary>
            Resolves the named instance of type <paramref name="instanceType"/>.
            </summary>
            <param name="instanceType">Type to resolve from container.</param>
            <param name="name">Name of the desired instance.</param>
            <returns>Object of type <paramref name="instanceType"/>.</returns>
        </member>
        <member name="M:Kros.Utils.IDiContainer.CreateChildContainer">
            <summary>
            Create a child container.
            </summary>
            <returns>The new child container.</returns>
            <remarks>
            A child container shares the parent's configuration, but can be configured with different settings or lifetime.
            </remarks>
        </member>
        <member name="T:Kros.Utils.ResourceHelper">
            <summary>
            Helper, ktorý slúži na získanie obsahu súborových resourcov.
            </summary>
        </member>
        <member name="M:Kros.Utils.ResourceHelper.GetResourceContent(System.String)">
            <summary>
            Gets the resource by name.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <returns>
            Resource content if resource exist; otherwise <see langword="null"/>.
            </returns>
            <remarks>
            Používa sa to ako work around,
            pretože v súčasnosti má dotnet core CLI problém získať obsah resourcu štandardným spôsobom.
            </remarks>
        </member>
        <member name="T:Kros.Utils.Suspender">
            <summary>
            Trieda, umožňujúca jednoduché pozastavenie práce. Pozastaviť prácu (<see cref="M:Kros.Utils.Suspender.Suspend"/> je možné
            viackrát/vnorene. V takom prípade je nutné obnoviť prácu toľkokrát, koľkokrát bola pozastavená.
            Ideálne je používať <c>using</c> blok.
            </summary>
            <remarks>
            Vhodné použitie je napríklad pri inicialziáciách objektov. Počas inicializácie je častokrát potrebné nevykonávať určité
            funkcie. Rieši sa to príznakom, či beží inicializácia. Trieda <c>Suspender</c> zapúzdruje udržiavanie tohto príznaku,
            pričom je možné ho nastavovať viackrát za sebou - vnorene.
            </remarks>
            <example>
            <code language = "cs" source="..\Examples\Kros.Utils\SuspenderExamples.cs" region="Init" />
            </example>
        </member>
        <member name="M:Kros.Utils.Suspender.Suspend">
            <summary>
            Pozastaví prácu. Príznak <see cref="P:Kros.Utils.Suspender.IsSuspended"/> je nastavený na <see langword="true"/>. Ak je práca pozastavená viackrát,
            je potrebné ju aj rovnaký počet krát obnoviť.
            </summary>
            <returns>
            Vráti objekt, ktorého uvoľnením (<c>Dispose()</c>) sa práca obnoví. Vhodné je používať <c>using</c> blok.
            </returns>
            <example>
            <code language = "cs" source="..\Examples\Kros.Utils\SuspenderExamples.cs" region="Init" />
            </example>
        </member>
        <member name="M:Kros.Utils.Suspender.SuspendCore">
            <summary>
            Metóda sa zavolá pri prvom volaní <see cref="M:Kros.Utils.Suspender.Suspend"/>, tzn. pri zmene stavu <see cref="P:Kros.Utils.Suspender.IsSuspended"/>
            z <see langword="false"/> na <see langword="true"/>.
            </summary>
            <remarks>
            Metóda je určená pre vlastné suspender-y, ktoré dedia z tejto triedy. V jej implementácii si vlastný suspender spraví
            potrebné veci pri suspendovaní. Metóda sa volá iba pri prvom suspendovaní, tzn. každé ďalšie volanie
            <see cref="M:Kros.Utils.Suspender.Suspend"/> už nevolá <see cref="M:Kros.Utils.Suspender.SuspendCore"/>. Metóda sa volá <legacyBold>pred</legacyBold>
            zmenou stavu suspendera, čiže hodnota <see cref="P:Kros.Utils.Suspender.IsSuspended"/> počas jej vykonávania je <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:Kros.Utils.Suspender.ResumeCore">
            <summary>
            Metóda sa zavolá pri poslednom volaní <c>Resume</c>, tzn. pri zmene stavu <see cref="P:Kros.Utils.Suspender.IsSuspended"/>
            z <see langword="true"/> na <see langword="false"/>.
            </summary>
            <remarks>
            Metóda je určená pre vlastné suspender-y, ktoré dedia z tejto triedy. V jej implementácii si vlastný suspender spraví
            potrebné veci pri obnovení stavu. Metóda sa volá iba raz, pri poslednom obnovení, tzn. až posledné volanie
            <c>Resume</c> zavolá <see cref="M:Kros.Utils.Suspender.ResumeCore"/>. Metóda sa volá <legacyBold>po</legacyBold>
            zmene stavu suspendera, čiže hodnota <see cref="P:Kros.Utils.Suspender.IsSuspended"/> počas jej vykonávania je <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Kros.Utils.Suspender.IsSuspended">
            <summary>
            Vráti príznak, či je práca pozastavená (<see langword="true"/>), alebo nie (<see langword="false"/>).
            </summary>
        </member>
    </members>
</doc>
